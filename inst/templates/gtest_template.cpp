// Instructions ----
// This file follows the format generated by FIMS:::use_gtest_template().
// Necessary tests include input and output (IO) correctness [IO
// correctness], edge-case handling [Edge handling], and built-in errors and
// warnings [Error handling]. See `?FIMS:::use_gtest_template` for more
// information. Every test should have a description comment.
// More assertion macros provided by GoogleTest can be found at 
// https://google.github.io/googletest/reference/assertions.html.

#include "gtest/gtest.h"
// TODO: Include the header file for the function being tested
// For example, if testing the `evaluate` member function of the 
// `LogisticSelectivity` class, include the corresponding header in the test 
// file `tests/gtest/test_population_dynamics_selectivity_logistic.cpp`:
// #include "population_dynamics/selectivity/functors/logistic.hpp"
#include "path/to/relevant/header_file.hpp"
// Include additional headers as needed
// For example, include <iostream> to use `std::cerr` and `std::cout`:
// #include <iostream>

namespace
{
  // {{{ class_name }}}_{{{ function_name }}} 
  // IO correctness
  TEST({{{ class_name }}}_{{{ function_name }}}, HandlesCorrectInput) {
    // Setup 
    // Load or prepare any necessary data for testing
    ...Prepare data here...
    
    // Test that {{{ function_name }}}(x) returns y.
    EXPECT_EQ({{{ function_name }}}(x), y);

    // Test that value returned from {{{ function_name }}}(x) and y does 
    // not exceed the absolute error abound abs_error.
    EXPECT_NEAR({{{ function_name }}}(x), y, abs_error);
  
  }

  // Edge handling 
  // Please remove/comment out the test template below if no edge cases are being 
  // tested.
  TEST({{{ class_name }}}_{{{ function_name }}}, HandlesEdgeCase) {
    // Setup 
    // Load or prepare any necessary data for testing
    ...Prepare data here...
    
    // Test that {{{ function_name }}}(x) returns y.
    EXPECT_EQ({{{ function_name }}}(x), y);

    // Test that {{{ function_name}}}(x) returns NaN for invalid inputs.
    EXPECT_TRUE(std::isnan({{{ function_name }}}(x)));
  }


  // Error handling
  // Please remove/comment out the test template below if there are no 
  // built-in errors/warnings.
  TEST({{{ class_name }}}_{{{ function_name }}}, CaptureError) {
    // Setup 
    // Load or prepare any necessary data for testing
    ...Prepare data here...

    // Redirect std::cerr to capture error messages
    // Create a stringstream to capture output
    std::stringstream captured_cerr;
    // Save the old buffer and redirect std::cerr to captured_cerr
    // captured_cerr.rdbuf() is an in-memory stream, and it returns a pointer to 
    // its internal buffer. Internal buffer is a block of memory used to 
    // temporarily store data before it is written.
    std::streambuf* old_cerr = std::cerr.rdbuf(captured_cerr.rdbuf());

    // Call the function under test
    {{{ function_name }}}(x);

    // Restore std::cerr to its original state
    std::cerr.rdbuf(old_cerr);
    
    // Test that {{{ function_name }}}(x) returns expected error.
    EXPECT_EQ(
      // Get the captured error output as a string
      captured_cerr.str(), 
      "Error: Expected error message.\n"
    );
  }

}