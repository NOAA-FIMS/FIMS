class BevertonHoltRecruitmentInterface : public RecruitmentInterfaceBase {
public:

   Parameter steep;
   Parameter rzero;
   Parameter phizero;


   BevertonHoltRecruitmentInterface() : RecruitmentInterfaceBase() {}

virtual ~BevertonHoltRecruitmentInterface() {}


virtual uint32_t get_id(){return this->id;}


virtual bool add_to_fims_tmb(){
    std::shared_ptr<fims::Information<TMB_FIMS_REAL_TYPE> > d0 =
    fims::Information<TMB_FIMS_REAL_TYPE>::GetInstance();

   std::shared_ptr<fims::SRBevertonHolt<TMB_FIMS_REAL_TYPE> > model0 =
   std::make_shared<fims::SRBevertonHolt<TMB_FIMS_REAL_TYPE> >();


   model0->id = this->id;
   model0->steep= this->steep.value;
   if (this->steep.estimated) {
        if (this->steep.is_random_effect) {
          d0->RegisterRandomEffect(model0->steep);
   } else {
      d0->RegisterParameter(model0->steep);
   }
} 
model0->rzero= this->rzero.value;
   if (this->rzero.estimated) {
        if (this->rzero.is_random_effect) {
          d0->RegisterRandomEffect(model0->rzero);
   } else {
      d0->RegisterParameter(model0->rzero);
   }
} 
model0->phizero= this->phizero.value;
   if (this->phizero.estimated) {
        if (this->phizero.is_random_effect) {
          d0->RegisterRandomEffect(model0->phizero);
   } else {
      d0->RegisterParameter(model0->phizero);
   }
} 
   d0->recruitment_models[model0->id]=model0;


    std::shared_ptr<fims::Information<TMB_FIMS_FIRST_ORDER> > d1 =
    fims::Information<TMB_FIMS_FIRST_ORDER>::GetInstance();

   std::shared_ptr<fims::SRBevertonHolt<TMB_FIMS_FIRST_ORDER> > model1 =
   std::make_shared<fims::SRBevertonHolt<TMB_FIMS_FIRST_ORDER> >();


   model1->id = this->id;
   model1->steep= this->steep.value;
   if (this->steep.estimated) {
        if (this->steep.is_random_effect) {
          d1->RegisterRandomEffect(model1->steep);
   } else {
      d1->RegisterParameter(model1->steep);
   }
} 
model1->rzero= this->rzero.value;
   if (this->rzero.estimated) {
        if (this->rzero.is_random_effect) {
          d1->RegisterRandomEffect(model1->rzero);
   } else {
      d1->RegisterParameter(model1->rzero);
   }
} 
model1->phizero= this->phizero.value;
   if (this->phizero.estimated) {
        if (this->phizero.is_random_effect) {
          d1->RegisterRandomEffect(model1->phizero);
   } else {
      d1->RegisterParameter(model1->phizero);
   }
} 
   d1->recruitment_models[model1->id]=model1;


    std::shared_ptr<fims::Information<TMB_FIMS_SECOND_ORDER> > d2 =
    fims::Information<TMB_FIMS_SECOND_ORDER>::GetInstance();

   std::shared_ptr<fims::SRBevertonHolt<TMB_FIMS_SECOND_ORDER> > model2 =
   std::make_shared<fims::SRBevertonHolt<TMB_FIMS_SECOND_ORDER> >();


   model2->id = this->id;
   model2->steep= this->steep.value;
   if (this->steep.estimated) {
        if (this->steep.is_random_effect) {
          d2->RegisterRandomEffect(model2->steep);
   } else {
      d2->RegisterParameter(model2->steep);
   }
} 
model2->rzero= this->rzero.value;
   if (this->rzero.estimated) {
        if (this->rzero.is_random_effect) {
          d2->RegisterRandomEffect(model2->rzero);
   } else {
      d2->RegisterParameter(model2->rzero);
   }
} 
model2->phizero= this->phizero.value;
   if (this->phizero.estimated) {
        if (this->phizero.is_random_effect) {
          d2->RegisterRandomEffect(model2->phizero);
   } else {
      d2->RegisterParameter(model2->phizero);
   }
} 
   d2->recruitment_models[model2->id]=model2;


    std::shared_ptr<fims::Information<TMB_FIMS_THIRD_ORDER> > d3 =
    fims::Information<TMB_FIMS_THIRD_ORDER>::GetInstance();

   std::shared_ptr<fims::SRBevertonHolt<TMB_FIMS_THIRD_ORDER> > model3 =
   std::make_shared<fims::SRBevertonHolt<TMB_FIMS_THIRD_ORDER> >();


   model3->id = this->id;
   model3->steep= this->steep.value;
   if (this->steep.estimated) {
        if (this->steep.is_random_effect) {
          d3->RegisterRandomEffect(model3->steep);
   } else {
      d3->RegisterParameter(model3->steep);
   }
} 
model3->rzero= this->rzero.value;
   if (this->rzero.estimated) {
        if (this->rzero.is_random_effect) {
          d3->RegisterRandomEffect(model3->rzero);
   } else {
      d3->RegisterParameter(model3->rzero);
   }
} 
model3->phizero= this->phizero.value;
   if (this->phizero.estimated) {
        if (this->phizero.is_random_effect) {
          d3->RegisterRandomEffect(model3->phizero);
   } else {
      d3->RegisterParameter(model3->phizero);
   }
} 
   d3->recruitment_models[model3->id]=model3;


return true;


}

};
//Add the following to the RCpp module definition: rcpp_interface.hpp

Rcpp::class_<BevertonHoltRecruitmentInterface>("BevertonHoltRecruitment")
.constructor()
.method("get_id",  &BevertonHoltRecruitmentInterface::get_id)
.field("steep", &BevertonHoltRecruitmentInterface::steep)
.field("rzero", &BevertonHoltRecruitmentInterface::rzero)
.field("phizero", &BevertonHoltRecruitmentInterface::phizero);
