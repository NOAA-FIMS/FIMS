[{"path":"https://NOAA-FIMS.github.io/FIMS/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to the NOAA Fisheries Integrated Modeling System","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"External contributions feedback important development future maintenance Fisheries Integrated Modeling System (FIMS) welcome. section provides contributing guidelines workflows developers FIMS ecosystem surrounding FIMS. contributors, internal external, required abide Code Conduct.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/CONTRIBUTING.html","id":"tldr--i-just-have-a-question","dir":"","previous_headings":"","what":"TLDR ‚Äî I just have a question","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"Please use GitHub Discussions question. special category set Q&. , also check categories see question already answered.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/CONTRIBUTING.html","id":"found-a-bug","dir":"","previous_headings":"","what":"Found a üêõ","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"Please use GitHub Issues submit üêõ report. idea well-defined enhancement FIMS, please use GitHub submit Feature request. submitting either tickets, please search existing issues see something identical similar already submitted. created, Issues automatically tagged status: triage_needed tag placed Issue Triage Board labeled, given assignee, given milestone charge triage process.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/CONTRIBUTING.html","id":"feature-branches","dir":"","previous_headings":"Contributing code","what":"Feature branches","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"issue approved prioritized work, feature branch dev branch, e.g., dev-discards, can created address issue. Feature branches can made within repository fork repository. making fork, sure fork branches just default branch feature branches created main hotfix current release, e.g., fix-pointer. hard fast rules branch names tend use dashes separate words. Often working new feature branch, updates dev branch. updates must brought using git rebase. Branches merge commits accepted code base. Please see GitHub documentation rebasing information. Along development process important add tests ensure code well documented. steps follow ensure code ready pull request: * Build doxygen-generated C++ documentation using cmake --build build, resulting html files build/html. can also done using setup_and_run_gtest() R. * Implement suite Google tests using cmake --build build ctest --test-dir build. can also done using setup_and_run_gtest() R. failing tests, run ctest --test-dir --rerun-failed --output--failure re-run failed tests verbosely. * Run clang format format C++ code using TODO: document run clang-format. * Run clang tidy check C++ common mistakes using TODO: document run clang-tidy. * Spell check package using spelling::spell_check_files(list.files(c(\"R\", \"tests\", file.path(\"inst\", \"include\")), recursive = TRUE, full.names = TRUE, pattern = \"\\\\.cpp|\\\\.hpp|\\\\.md|\\\\.R$|\\\\.Rmd|\\\\.txt\"), ignore = spelling::get_wordlist()). Remove .md files vignettes directory spell check package using spelling::spell_check_package(pkg = \".\", use_wordlist = TRUE). * Build roxygen documentation using devtools::document(). See r-lib available tags best practices. * Implement suite testthat tests using devtools::test(). * Run styler::style_pkg() style R code. * Run devtools::check() ensure package can compiled R tests pass. failing tests, run devtools::test(filter = \"file_name\") (‚Äútest-file_name.R‚Äù testthat file containing failing tests) edit code/tests troubleshoot tests. development, run devtools::build() locally build package frequently faster. * Build package site using pkgdown::build_site(). * Run code coverage report using covr::report() ensure code covered, goal maintaining 80 percent code coverage.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"Contributing code","what":"Pull requests","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"work complete, pull request created bring changes appropriate branch. Pull requests forks reviewed guidelines pull requests internal branches. Review pull request automated manual, pull requests must pass automated tests syntax checks merged addition reviewed least one developer. Code review ensures health continuous improvement FIMS codebase, simultaneously helping FIMS developers become familiar codebase. Google‚Äôs code review guide provides useful set guidelines reviewers code authors. PR accompanied checklist major considerations code reviews guide reviewers PR. Additional guidance can found Conventional Comments formatting/structuring reviewer comments. Navigate Perforce Blog nine best practices code review use FIMS Style Guide settle style arguments. Versioning follows semantic versioning establish major, minor, patch number release. Often, multiple pull requests included single release, initiated member FIMS Implementation Team. Release notes version can found release notes.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/CONTRIBUTING.html","id":"non-code-contributions","dir":"","previous_headings":"","what":"Non-code contributions","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"contributions code! Writing documentation, teaching, activities also key parts contributing software much appreciated. information open source contributions, see Open Source Guide‚Äôs Contribute page. good place start looking open issues good first issue label. issues generally small well-defined, making good starting point new contributors. encourage collaborators feel welcome contribute way can, best incorporate contributions FIMS projects. thank advance part team.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/CONTRIBUTING.html","id":"style-guide","dir":"","previous_headings":"","what":"Style guide","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"Style guides used ensure code consistent, easy use (e.g., read, share, verify) ultimately easier write. use Google C++ Style Guide C++ code tidyverse style guide R code. self-imposed style within FIMS use typename instead class defining templates consistency TMB package. types may defined many ways, use Type instead T define Types. Commit messages communicate details changes occurred collaborators improve team efficiency. best guidance create excellent commit message can found Conventional Commits, style guide commit messages. See Conventional Comments format reviewer comments.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo-minimal.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Minimal Example for Running a FIMS Model","text":"vignette provides minimal steps needed run Fisheries Integrated Modeling System (FIMS) model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo-minimal.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Minimal Example for Running a FIMS Model","text":"Load FIMS package clear memory:","code":"library(FIMS)  # clear memory clear()"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo-minimal.html","id":"data-and-parameters","dir":"Articles","previous_headings":"","what":"Data and parameters","title":"Minimal Example for Running a FIMS Model","text":"First, load available data create FIMS data frame create model . create set default parameters.","code":"# Load sample data data(\"data1\") # Prepare data for FIMS model data_4_model <- FIMSFrame(data1)  # Create parameters parameters <- data_4_model |>   create_default_configurations() |>   create_default_parameters(data = data_4_model)"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo-minimal.html","id":"initialize-and-fit","dir":"Articles","previous_headings":"","what":"Initialize and Fit","title":"Minimal Example for Running a FIMS Model","text":"Initialize FIMS modules fit model.","code":"# Run the  model with optimization fit <- parameters |>   initialize_fims(data = data_4_model) |>   fit_fims(optimize = TRUE) ## ‚úî Starting optimization ... ## ‚Ñπ Restarting optimizer 3 times to improve gradient. ## ‚Ñπ Maximum gradient went from 0.00915 to 0.00057 after 3 steps. ## ‚úî Finished optimization ## ‚úî Finished sdreport ## ‚Ñπ FIMS model version: 0.7 ## ‚Ñπ Total run time was 6.45911 seconds ## ‚Ñπ Number of parameters: fixed_effects=77, random_effects=0, and total=77 ## ‚Ñπ Maximum gradient= 0.00057 ## ‚Ñπ Negative log likelihood (NLL): ## ‚Ä¢ Marginal NLL= 3240.1261 ## ‚Ä¢ Total NLL= 3240.1261 ## ‚Ñπ Terminal SB= 1803.27839 # Clear memory post-run clear()"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"fims","dir":"Articles","previous_headings":"","what":"FIMS","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"NOAA Fisheries Integrated Modeling System (FIMS) new modeling framework fisheries modeling. framework designed support next-generation fisheries stock assessment, ecosystem, socioeconomic modeling. important note FIMS model rather framework creating models. framework made many modules come together create model best suits needs end-user. remainder vignette walks absolutely necessary run FIMS catch--age model using default settings.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"memory","dir":"Articles","previous_headings":"","what":"Memory","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"Calling library(FIMS) loads R package Rcpp functions modules R environment. C++ code compiled upon installation rather loading call library() pretty fast. Users always run clear() prior modeling ensure C++ memory previous FIMS model run cleared .","code":"library(FIMS) library(ggplot2)  # clear memory clear()"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"Data FIMS model must stored single data frame long format, e.g., data(\"data1\", package = \"FIMS\"). design similar running linear model pass single data frame lm(). long format lead information duplicated. example, units listed every row rather stored single location data type. , long format facilitates using tidy functions manipulate data. , single function, .e., FIMSFrame(), needed prepare data used FIMS model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"data1","dir":"Articles","previous_headings":"Data","what":"data1","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"sample data frame catch--age model ages lengths stored package data1. data set based data used Li et al. Model Comparison Project (github site). length data since added data-raw/data1.R based age-length conversion matrix. See R/data1.R ?data1 details package data.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"fimsframe","dir":"Articles","previous_headings":"Data","what":"FIMSFrame()","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"easiest way prepare data FIMS model use FIMSFrame(). function performs several validation checks returns object S4 class called FIMSFrame. helper functions working FIMSFrame object, e.g., get_data(), get_n_years(), get_*(). Additionally, helper functions pulling data S4 class format needed module, .e., vector, m_*() functions largely meant used internally within package exported allow use power users wishing manually set . S4 object named data_4_model contains many slots (.e., named components object can accessed) perhaps interesting one long data frame stored ‚Äúdata‚Äù slot. tibble stored slot can accessed using get_data(). data contains following fleets: single fishery fleet age- length-composition, weight--age, landings data single survey age- length-composition index data","code":"# Bring the package data into your environment data(\"data1\") # Prepare the package data for being used in a FIMS model data_4_model <- FIMSFrame(data1) # Use show() to see what is stored in the FIMSFrame S4 class methods::show(data_4_model) ## tbl_df of class 'FIMSFrame' ## with the following 'types': age-to-length-conversion, age_comp, landings, length_comp, weight-at-age, index ## # A tibble: 6 √ó 10 ##   type       name    age length datestart dateend    value unit      uncertainty ##   <chr>      <chr> <int>  <dbl> <date>    <date>     <dbl> <chr>           <dbl> ## 1 age-to-le‚Ä¶ flee‚Ä¶     1      0 1-01-01   1-12-31 1.26e-16 proporti‚Ä¶         200 ## 2 age-to-le‚Ä¶ flee‚Ä¶     1     50 1-01-01   1-12-31 8.39e-11 proporti‚Ä¶         200 ## 3 age-to-le‚Ä¶ flee‚Ä¶     1    100 1-01-01   1-12-31 2.30e- 6 proporti‚Ä¶         200 ## 4 age-to-le‚Ä¶ flee‚Ä¶     1    150 1-01-01   1-12-31 2.74e- 3 proporti‚Ä¶         200 ## 5 age-to-le‚Ä¶ flee‚Ä¶     1    200 1-01-01   1-12-31 1.63e- 1 proporti‚Ä¶         200 ## 6 age-to-le‚Ä¶ flee‚Ä¶     1    250 1-01-01   1-12-31 6.32e- 1 proporti‚Ä¶         200 ## # ‚Ñπ 1 more variable: year <dbl> ## additional slots include the following:fleets: ## [1] \"fleet1\"  \"survey1\" ## n_years: ## [1] 30 ## ages: ##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 ## n_ages: ## [1] 12 ## lengths: ##  [1]    0   50  100  150  200  250  300  350  400  450  500  550  600  650  700 ## [16]  750  800  850  900  950 1000 1050 1100 ## n_lengths: ## [1] 23 ## start_year: ## [1] 1 ## end_year: ## [1] 30 # Or, look at the structure using str() # Increase max.level to see more of the structure str(data_4_model, max.level = 1) ## Formal class 'FIMSFrame' [package \"FIMS\"] with 9 slots # Use dplyr to subset the data for just the landings get_data(data_4_model) |>   dplyr::filter(type == \"landings\") ## # A tibble: 30 √ó 10 ##    type   name    age length datestart dateend  value unit  uncertainty  year ##    <chr>  <chr> <int>  <dbl> <date>    <date>   <dbl> <chr>       <dbl> <dbl> ##  1 landi‚Ä¶ flee‚Ä¶    NA     NA 1-01-01   1-12-31   162. mt        0.01000     1 ##  2 landi‚Ä¶ flee‚Ä¶    NA     NA 2-01-01   2-12-31   461. mt        0.01000     2 ##  3 landi‚Ä¶ flee‚Ä¶    NA     NA 3-01-01   3-12-31   747. mt        0.01000     3 ##  4 landi‚Ä¶ flee‚Ä¶    NA     NA 4-01-01   4-12-31   997. mt        0.01000     4 ##  5 landi‚Ä¶ flee‚Ä¶    NA     NA 5-01-01   5-12-31   768. mt        0.01000     5 ##  6 landi‚Ä¶ flee‚Ä¶    NA     NA 6-01-01   6-12-31  1344. mt        0.01000     6 ##  7 landi‚Ä¶ flee‚Ä¶    NA     NA 7-01-01   7-12-31  1319. mt        0.01000     7 ##  8 landi‚Ä¶ flee‚Ä¶    NA     NA 8-01-01   8-12-31  2598. mt        0.01000     8 ##  9 landi‚Ä¶ flee‚Ä¶    NA     NA 9-01-01   9-12-31  1426. mt        0.01000     9 ## 10 landi‚Ä¶ flee‚Ä¶    NA     NA 10-01-01  10-12-31 1644. mt        0.01000    10 ## # ‚Ñπ 20 more rows"},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"create_default_configurations","dir":"Articles","previous_headings":"configurations","what":"create_default_configurations()","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"create_default_configurations() function designed generate set default configurations various components FIMS model. includes configurations fleets, growth, maturity, recruitment modules. leveraging structure input data, function can automatically set initial configurations module. passing data configurations create_default_parameters() function can tailor defaults based many fleets data types exist. example, three fleets, create_default_configurations() set three logistic selectivity modules.","code":"# Create default configurations based on the data default_configurations <- create_default_configurations(data = data_4_model) |>   print() ## ‚Ä©[38;5;246m# A tibble: 7 √ó 4‚Ä©[39m ##   model_family module_name fleet_name data             ##   ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m        ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m       ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m      ‚Ä©[3m‚Ä©[38;5;246m<list>‚Ä©[39m‚Ä©[23m           ## ‚Ä©[38;5;250m1‚Ä©[39m catch_at_age Data        fleet1     ‚Ä©[38;5;246m<tibble [3 √ó 4]>‚Ä©[39m ## ‚Ä©[38;5;250m2‚Ä©[39m catch_at_age Selectivity fleet1     ‚Ä©[38;5;246m<tibble [1 √ó 4]>‚Ä©[39m ## ‚Ä©[38;5;250m3‚Ä©[39m catch_at_age Data        survey1    ‚Ä©[38;5;246m<tibble [3 √ó 4]>‚Ä©[39m ## ‚Ä©[38;5;250m4‚Ä©[39m catch_at_age Selectivity survey1    ‚Ä©[38;5;246m<tibble [1 √ó 4]>‚Ä©[39m ## ‚Ä©[38;5;250m5‚Ä©[39m catch_at_age Growth      ‚Ä©[31mNA‚Ä©[39m         ‚Ä©[38;5;246m<tibble [1 √ó 4]>‚Ä©[39m ## ‚Ä©[38;5;250m6‚Ä©[39m catch_at_age Maturity    ‚Ä©[31mNA‚Ä©[39m         ‚Ä©[38;5;246m<tibble [1 √ó 4]>‚Ä©[39m ## ‚Ä©[38;5;250m7‚Ä©[39m catch_at_age Recruitment ‚Ä©[31mNA‚Ä©[39m         ‚Ä©[38;5;246m<tibble [1 √ó 4]>‚Ä©[39m # The output is a nested tibble, with details in the `data` column. default_configurations_unnested <- default_configurations |>   tidyr::unnest(cols = data) |>   print() ## ‚Ä©[38;5;246m# A tibble: 11 √ó 7‚Ä©[39m ##    model_family module_name fleet_name module_type  distribution_link ##    ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m        ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m       ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m      ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m        ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m             ## ‚Ä©[38;5;250m 1‚Ä©[39m catch_at_age Data        fleet1     AgeComp      AgeComp           ## ‚Ä©[38;5;250m 2‚Ä©[39m catch_at_age Data        fleet1     Landings     Landings          ## ‚Ä©[38;5;250m 3‚Ä©[39m catch_at_age Data        fleet1     LengthComp   LengthComp        ## ‚Ä©[38;5;250m 4‚Ä©[39m catch_at_age Selectivity fleet1     Logistic     ‚Ä©[31mNA‚Ä©[39m                ## ‚Ä©[38;5;250m 5‚Ä©[39m catch_at_age Data        survey1    AgeComp      AgeComp           ## ‚Ä©[38;5;250m 6‚Ä©[39m catch_at_age Data        survey1    Index        Index             ## ‚Ä©[38;5;250m 7‚Ä©[39m catch_at_age Data        survey1    LengthComp   LengthComp        ## ‚Ä©[38;5;250m 8‚Ä©[39m catch_at_age Selectivity survey1    Logistic     ‚Ä©[31mNA‚Ä©[39m                ## ‚Ä©[38;5;250m 9‚Ä©[39m catch_at_age Growth      ‚Ä©[31mNA‚Ä©[39m         EWAA         ‚Ä©[31mNA‚Ä©[39m                ## ‚Ä©[38;5;250m10‚Ä©[39m catch_at_age Maturity    ‚Ä©[31mNA‚Ä©[39m         Logistic     ‚Ä©[31mNA‚Ä©[39m                ## ‚Ä©[38;5;250m11‚Ä©[39m catch_at_age Recruitment ‚Ä©[31mNA‚Ä©[39m         BevertonHolt log_devs          ## ‚Ä©[38;5;246m# ‚Ñπ 2 more variables: distribution_type <chr>, distribution <chr>‚Ä©[39m"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"update-configurations","dir":"Articles","previous_headings":"configurations","what":"Update configurations","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"default_configurations just starting point. Functions (e.g., rows_*()) dplyr can used modify default configurations needed. example, logistic selectivity survey1 can changed double logistic selectivity.","code":"# Update the module_type for survey1's selectivity updated_configurations <- default_configurations_unnested |>   dplyr::rows_update(     y = tibble::tibble(       module_name = c(\"Selectivity\"),       fleet_name = c(\"survey1\"),       module_type = c(\"DoubleLogistic\")     ),     by = c(\"module_name\", \"fleet_name\")   ) |>   print() ## ‚Ä©[38;5;246m# A tibble: 11 √ó 7‚Ä©[39m ##    model_family module_name fleet_name module_type    distribution_link ##    ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m        ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m       ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m      ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m          ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m             ## ‚Ä©[38;5;250m 1‚Ä©[39m catch_at_age Data        fleet1     AgeComp        AgeComp           ## ‚Ä©[38;5;250m 2‚Ä©[39m catch_at_age Data        fleet1     Landings       Landings          ## ‚Ä©[38;5;250m 3‚Ä©[39m catch_at_age Data        fleet1     LengthComp     LengthComp        ## ‚Ä©[38;5;250m 4‚Ä©[39m catch_at_age Selectivity fleet1     Logistic       ‚Ä©[31mNA‚Ä©[39m                ## ‚Ä©[38;5;250m 5‚Ä©[39m catch_at_age Data        survey1    AgeComp        AgeComp           ## ‚Ä©[38;5;250m 6‚Ä©[39m catch_at_age Data        survey1    Index          Index             ## ‚Ä©[38;5;250m 7‚Ä©[39m catch_at_age Data        survey1    LengthComp     LengthComp        ## ‚Ä©[38;5;250m 8‚Ä©[39m catch_at_age Selectivity survey1    DoubleLogistic ‚Ä©[31mNA‚Ä©[39m                ## ‚Ä©[38;5;250m 9‚Ä©[39m catch_at_age Growth      ‚Ä©[31mNA‚Ä©[39m         EWAA           ‚Ä©[31mNA‚Ä©[39m                ## ‚Ä©[38;5;250m10‚Ä©[39m catch_at_age Maturity    ‚Ä©[31mNA‚Ä©[39m         Logistic       ‚Ä©[31mNA‚Ä©[39m                ## ‚Ä©[38;5;250m11‚Ä©[39m catch_at_age Recruitment ‚Ä©[31mNA‚Ä©[39m         BevertonHolt   log_devs          ## ‚Ä©[38;5;246m# ‚Ñπ 2 more variables: distribution_type <chr>, distribution <chr>‚Ä©[39m # Nest updated_configurations updated_configurations_nested <- updated_configurations |>   tidyr::nest(.by = c(model_family, module_name, fleet_name))"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"parameters model depend modules used FIMS framework. combination modules rather use control file negates need complicated {} else{} statements code.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"create_default_parameters","dir":"Articles","previous_headings":"Parameters","what":"create_default_parameters()","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"Modules available FIMS known reference classes C++ code. reference class acts interface R underlining C++ code defines FIMS. Several reference classes exist several created future. beauty modules rather control file really comes reference classes created reference class can accessed R build model rather needing modify control file future features. just passing configurations data create_default_parameters(), default values parameters relate fleet(s), recruitment, growth, maturity modules can created. example, ‚ÄúBevertonHolt‚Äù recruitment module ‚ÄúDnorm‚Äù distribution recruitment deviations (log_devs) ‚ÄúEWAA‚Äù Growth module, ‚ÄúLogistic‚Äù Maturity module.","code":"# Create default parameters based on default_configurations and data default_parameters <- create_default_parameters(   configurations = default_configurations,   data = data_4_model ) |>   print() ## ‚Ä©[38;5;246m# A tibble: 10 √ó 4‚Ä©[39m ##    model_family module_name fleet_name data                ##    ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m        ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m       ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m      ‚Ä©[3m‚Ä©[38;5;246m<list>‚Ä©[39m‚Ä©[23m              ## ‚Ä©[38;5;250m 1‚Ä©[39m catch_at_age Selectivity fleet1     ‚Ä©[38;5;246m<tibble [2 √ó 10]>‚Ä©[39m   ## ‚Ä©[38;5;250m 2‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[38;5;246m<tibble [31 √ó 10]>‚Ä©[39m  ## ‚Ä©[38;5;250m 3‚Ä©[39m catch_at_age Data        fleet1     ‚Ä©[38;5;246m<tibble [32 √ó 10]>‚Ä©[39m  ## ‚Ä©[38;5;250m 4‚Ä©[39m catch_at_age Selectivity survey1    ‚Ä©[38;5;246m<tibble [2 √ó 10]>‚Ä©[39m   ## ‚Ä©[38;5;250m 5‚Ä©[39m catch_at_age Fleet       survey1    ‚Ä©[38;5;246m<tibble [31 √ó 10]>‚Ä©[39m  ## ‚Ä©[38;5;250m 6‚Ä©[39m catch_at_age Data        survey1    ‚Ä©[38;5;246m<tibble [32 √ó 10]>‚Ä©[39m  ## ‚Ä©[38;5;250m 7‚Ä©[39m catch_at_age Recruitment ‚Ä©[31mNA‚Ä©[39m         ‚Ä©[38;5;246m<tibble [150 √ó 10]>‚Ä©[39m ## ‚Ä©[38;5;250m 8‚Ä©[39m catch_at_age Maturity    ‚Ä©[31mNA‚Ä©[39m         ‚Ä©[38;5;246m<tibble [2 √ó 10]>‚Ä©[39m   ## ‚Ä©[38;5;250m 9‚Ä©[39m catch_at_age Population  ‚Ä©[31mNA‚Ä©[39m         ‚Ä©[38;5;246m<tibble [372 √ó 10]>‚Ä©[39m ## ‚Ä©[38;5;250m10‚Ä©[39m catch_at_age Growth      ‚Ä©[31mNA‚Ä©[39m         ‚Ä©[38;5;246m<tibble [1 √ó 10]>‚Ä©[39m # Unnest the default_parameters to see the detailed parameters default_parameters_unnested <- tidyr::unnest(default_parameters, cols = data) |>   print() ## ‚Ä©[38;5;246m# A tibble: 655 √ó 13‚Ä©[39m ##    model_family module_name fleet_name module_type label distribution_link   age ##    ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m        ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m       ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m      ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m       ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m ‚Ä©[3m‚Ä©[38;5;246m<chr>‚Ä©[39m‚Ä©[23m             ‚Ä©[3m‚Ä©[38;5;246m<dbl>‚Ä©[39m‚Ä©[23m ## ‚Ä©[38;5;250m 1‚Ä©[39m catch_at_age Selectivity fleet1     Logistic    infl‚Ä¶ ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m 2‚Ä©[39m catch_at_age Selectivity fleet1     Logistic    slope ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m 3‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[31mNA‚Ä©[39m          log_q ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m 4‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[31mNA‚Ä©[39m          log_‚Ä¶ ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m 5‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[31mNA‚Ä©[39m          log_‚Ä¶ ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m 6‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[31mNA‚Ä©[39m          log_‚Ä¶ ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m 7‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[31mNA‚Ä©[39m          log_‚Ä¶ ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m 8‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[31mNA‚Ä©[39m          log_‚Ä¶ ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m 9‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[31mNA‚Ä©[39m          log_‚Ä¶ ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;250m10‚Ä©[39m catch_at_age Fleet       fleet1     ‚Ä©[31mNA‚Ä©[39m          log_‚Ä¶ ‚Ä©[31mNA‚Ä©[39m                   ‚Ä©[31mNA‚Ä©[39m ## ‚Ä©[38;5;246m# ‚Ñπ 645 more rows‚Ä©[39m ## ‚Ä©[38;5;246m# ‚Ñπ 6 more variables: length <dbl>, time <dbl>, value <dbl>,‚Ä©[39m ## ‚Ä©[38;5;246m#   estimation_type <chr>, distribution_type <chr>, distribution <chr>‚Ä©[39m"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"update-parameters","dir":"Articles","previous_headings":"Parameters","what":"Update parameters","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"Functions (e.g., rows_*()) dplyr can used update default parameters needed. code , rows_update() used adjust fishing mortality, selectivity, maturity, population parameters default values.","code":"parameters_4_model <- default_parameters |>   tidyr::unnest(cols = data) |>   # Update log_Fmort initial values for Fleet1   dplyr::rows_update(     tibble::tibble(       fleet_name = \"fleet1\",       label = \"log_Fmort\",       time = 1:30,       value = log(c(         0.009459165, 0.027288858, 0.045063639,         0.061017825, 0.048600752, 0.087420554,         0.088447204, 0.186607929, 0.109008958,         0.132704335, 0.150615473, 0.161242955,         0.116640187, 0.169346119, 0.180191913,         0.161240483, 0.314573212, 0.257247574,         0.254887252, 0.251462108, 0.349101406,         0.254107720, 0.418478117, 0.345721184,         0.343685540, 0.314171227, 0.308026829,         0.431745298, 0.328030899, 0.499675368       ))     ),     by = c(\"fleet_name\", \"label\", \"time\")   ) |>   # Update selectivity parameters and log_q for survey1   dplyr::rows_update(     tibble::tibble(       fleet_name = \"survey1\",       label = c(\"inflection_point\", \"slope\", \"log_q\"),       value = c(1.5, 2, log(3.315143e-07))     ),     by = c(\"fleet_name\", \"label\")   ) |>   # Update log_devs in the Recruitment module (time steps 2-30)   dplyr::rows_update(     tibble::tibble(       label = \"log_devs\",       time = 2:30,       value = c(         0.43787763, -0.13299042, -0.43251973, 0.64861200, 0.50640852,         -0.06958319, 0.30246260, -0.08257384, 0.20740372, 0.15289604,         -0.21709207, -0.13320626, 0.11225374, -0.10650836, 0.26877132,         0.24094126, -0.54480751, -0.23680557, -0.58483386, 0.30122785,         0.21930545, -0.22281699, -0.51358369, 0.15740234, -0.53988240,         -0.19556523, 0.20094360, 0.37248740, -0.07163145       )     ),     by = c(\"label\", \"time\")   ) |>   # Update log_sd for log_devs in the Recruitment module   dplyr::rows_update(     tibble::tibble(       module_name = \"Recruitment\",       label = \"log_sd\",       value = 0.4     ),     by = c(\"module_name\", \"label\")   ) |>   # Update inflection point and slope parameters in the Maturity module   dplyr::rows_update(     tibble::tibble(       module_name = \"Maturity\",       label = c(\"inflection_point\", \"slope\"),       value = c(2.25, 3)     ),     by = c(\"module_name\", \"label\")   ) |>   # Update log_init_naa values in the Population module   dplyr::rows_update(     tibble::tibble(       label = \"log_init_naa\",       age = 1:12,       value = c(         13.80944, 13.60690, 13.40217, 13.19525, 12.98692, 12.77791,         12.56862, 12.35922, 12.14979, 11.94034, 11.73088, 13.18755       )     ),     by = c(\"label\", \"age\")   )"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"fit","dir":"Articles","previous_headings":"","what":"Fit","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"data parameters place, can now initialize modules using initialize_fims() fit model using fit_fims().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"initialize_fims","dir":"Articles","previous_headings":"Fit","what":"initialize_fims()","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"tibble returned create_default_parameters() just data frame containing specifications. Nothing created memory yet. actually initialize modules, initialize_fims() needs called. function takes specifications matches appropriate data initialize module create pointers memory.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"fit_fims","dir":"Articles","previous_headings":"Fit","what":"fit_fims()","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"list returned initialize_fims() can passed parameter fit_fims() called input run FIMS model. optimize = FALSE, model actually optimized instead just checked ensure viable model. optimize = TRUE, model fit using stats::nlminb() object class FIMSFit returned.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"example","dir":"Articles","previous_headings":"Fit","what":"Example","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"results can plotted either base R using {ggplot2}.","code":"# Run the model without optimization to help ensure a viable model test_fit <- parameters_4_model |>   initialize_fims(data = data_4_model) |>   fit_fims(optimize = FALSE) clear() # Run the  model with optimization fit <- parameters_4_model |>   initialize_fims(data = data_4_model) |>   fit_fims(optimize = TRUE) ## ‚úî Starting optimization ... ## ‚Ñπ Restarting optimizer 3 times to improve gradient. ## ‚Ñπ Maximum gradient went from 0.00512 to 0.00032 after 3 steps. ## ‚úî Finished optimization ## ‚úî Finished sdreport ## ‚Ñπ FIMS model version: 0.7 ## ‚Ñπ Total run time was 6.55601 seconds ## ‚Ñπ Number of parameters: fixed_effects=77, random_effects=0, and total=77 ## ‚Ñπ Maximum gradient= 0.00032 ## ‚Ñπ Negative log likelihood (NLL): ## ‚Ä¢ Marginal NLL= 3166.02383 ## ‚Ä¢ Total NLL= 3166.02383 ## ‚Ñπ Terminal SB= 1779.18153 clear() # finalize is not working, you get the following error when you do this code # Error: basic_string::_M_create # if you run clear() ahead of the following line the error will go away # fit_output <- finalize(fit@opt$par, fit@obj$fn, fit@obj$gr)  # Get information about the model and print a few characters to the screen recruitment_log <- get_log_module(\"information\") substr(recruitment_log, 1, 100) ## [1] \"[\\n]\" index_results <- data.frame(   observed = m_index(data_4_model, \"survey1\"),   expected = get_report(fit)[[\"index_exp\"]][[2]],   years = get_start_year(data_4_model):get_end_year(data_4_model) ) print(index_results) ##       observed    expected years ## 1  0.006117418 0.006489698     1 ## 2  0.007156588 0.006553593     2 ## 3  0.006553376 0.006572973     3 ## 4  0.006501745 0.006459369     4 ## 5  0.006562572 0.006211229     5 ## 6  0.006467796 0.006193904     6 ## 7  0.005248220 0.006068948     7 ## 8  0.006568311 0.005916306     8 ## 9  0.005516030 0.005303574     9 ## 10 0.005614254 0.005111184    10 ## 11 0.004269091 0.004836804    11 ## 12 0.004842784 0.004510400    12 ## 13 0.004018395 0.004146893    13 ## 14 0.004741539 0.003984685    14 ## 15 0.003444776 0.003705819    15 ## 16 0.004062555 0.003471227    16 ## 17 0.003790370 0.003369435    17 ## 18 0.002892876 0.002924379    18 ## 19 0.002765623 0.002643862    19 ## 20 0.002349581 0.002361533    20 ## 21 0.002007219 0.002130067    21 ## 22 0.001883646 0.001897533    22 ## 23 0.001908972 0.001950093    23 ## 24 0.001596426 0.001726015    24 ## 25 0.001248675 0.001575694    25 ## 26 0.001459593 0.001466748    26 ## 27 0.001255182 0.001404757    27 ## 28 0.001314476 0.001365663    28 ## 29 0.001364266 0.001292371    29 ## 30 0.001343069 0.001401679    30 ggplot2::ggplot(index_results, ggplot2::aes(x = years, y = observed)) +   ggplot2::geom_point() +   ggplot2::xlab(\"Year\") +   ggplot2::ylab(\"Index (mt)\") +   ggplot2::geom_line(ggplot2::aes(x = years, y = expected), color = \"blue\") +   ggplot2::theme_bw() landings_results <- data.frame(   observed = m_landings(data_4_model, fleet = \"fleet1\"),   expected = get_report(fit)[[\"landings_exp\"]][[1]],   years = get_start_year(data_4_model):get_end_year(data_4_model) ) print(landings_results) ##     observed  expected years ## 1   161.6455  161.6443     1 ## 2   461.0895  461.0768     2 ## 3   747.2900  747.2702     3 ## 4   996.9711  996.9800     4 ## 5   767.5477  767.5611     5 ## 6  1343.8609 1343.9332     6 ## 7  1319.0663 1319.1035     7 ## 8  2597.5051 2598.0667     8 ## 9  1425.8608 1425.9444     9 ## 10 1643.6742 1643.6463    10 ## 11 1770.8245 1770.6432    11 ## 12 1751.2628 1751.0176    12 ## 13 1194.0655 1193.9453    13 ## 14 1638.4036 1638.3372    14 ## 15 1584.1855 1584.3797    15 ## 16 1333.1820 1333.2114    16 ## 17 2325.4425 2325.8491    17 ## 18 1693.7841 1693.9358    18 ## 19 1531.8238 1532.1477    19 ## 20 1358.8162 1359.3601    20 ## 21 1638.8798 1639.0245    21 ## 22 1077.3713 1077.1712    22 ## 23 1647.9104 1647.3001    23 ## 24 1224.4634 1224.6413    24 ## 25 1126.9182 1126.7708    25 ## 26  956.4529  956.3227    26 ## 27  902.1621  902.1436    27 ## 28 1168.8217 1168.8928    28 ## 29  852.3819  852.0580    29 ## 30 1274.3777 1274.3621    30 ggplot2::ggplot(landings_results, ggplot2::aes(x = years, y = observed)) +   ggplot2::geom_point() +   ggplot2::xlab(\"Year\") +   ggplot2::ylab(\"Index (mt)\") +   ggplot2::geom_line(ggplot2::aes(x = years, y = expected), color = \"blue\") +   ggplot2::theme_bw()"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"sensitivities","dir":"Articles","previous_headings":"Fit","what":"Sensitivities","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"Multiple fits, .e., sensitivity runs, can set modifying parameter list using update_parameters() changing data used fit model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"initial-values","dir":"Articles","previous_headings":"Fit > Sensitivities","what":"Initial values","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"example, one change initial value used slope logistic curve survey see terminal estimate changes due changes initial value.","code":"parameters_high_slope <- parameters_4_model |>   # Update the slope value of the logistic selectivity for the survey   dplyr::mutate(     value = dplyr::if_else(       module_name == \"Selectivity\" &         fleet_name == \"survey1\" &         label == \"slope\",       2.5,       value     )   )  parameters_low_slope <- parameters_4_model |>   dplyr::mutate(     value = dplyr::if_else(       module_name == \"Selectivity\" &         fleet_name == \"survey1\" &         label == \"slope\",       1,       value     )   )  high_slope_fit <- parameters_high_slope |>   initialize_fims(data = data_4_model) |>   fit_fims(optimize = TRUE) ## ‚úî Starting optimization ... ## ‚Ñπ Restarting optimizer 3 times to improve gradient. ## ‚Ñπ Maximum gradient went from 0.04636 to 0.00107 after 3 steps. ## ‚úî Finished optimization ## ‚úî Finished sdreport ## ‚Ñπ FIMS model version: 0.7 ## ‚Ñπ Total run time was 6.36311 seconds ## ‚Ñπ Number of parameters: fixed_effects=77, random_effects=0, and total=77 ## ‚Ñπ Maximum gradient= 0.00107 ## ‚Ñπ Negative log likelihood (NLL): ## ‚Ä¢ Marginal NLL= 3166.02383 ## ‚Ä¢ Total NLL= 3166.02383 ## ‚Ñπ Terminal SB= 1779.19272 clear()  low_slope_fit <- parameters_low_slope |>   initialize_fims(data = data_4_model) |>   fit_fims(optimize = TRUE) ## ‚úî Starting optimization ... ## ‚Ñπ Restarting optimizer 3 times to improve gradient. ## ‚Ñπ Maximum gradient went from 0.02164 to 0.00321 after 3 steps. ## ‚úî Finished optimization ## ‚úî Finished sdreport ## ‚Ñπ FIMS model version: 0.7 ## ‚Ñπ Total run time was 6.28882 seconds ## ‚Ñπ Number of parameters: fixed_effects=77, random_effects=0, and total=77 ## ‚Ñπ Maximum gradient= 0.00321 ## ‚Ñπ Negative log likelihood (NLL): ## ‚Ä¢ Marginal NLL= 3166.02383 ## ‚Ä¢ Total NLL= 3166.02383 ## ‚Ñπ Terminal SB= 1779.19885 clear()"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"age-only","dir":"Articles","previous_headings":"Fit > Sensitivities","what":"Age only","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"model can fit just age data, removing length composition configurations.","code":"# Create default parameters, update with modified values, initialize FIMS, # and fit the model age_only_fit <- parameters_4_model |>   # remove rows that have module_type == LengthComp   dplyr::rows_delete(     y = tibble::tibble(module_type = \"LengthComp\")   ) |>   initialize_fims(data = data_4_model) |>   fit_fims(optimize = TRUE) ## Matching, by = \"module_type\" ## ‚úî Starting optimization ... ## ‚Ñπ Restarting optimizer 3 times to improve gradient. ## ‚Ñπ Maximum gradient went from 0.00513 to 0.00134 after 3 steps. ## ‚úî Finished optimization ## ‚úî Finished sdreport ## ‚Ñπ FIMS model version: 0.7 ‚Ñπ Total run time was 0.56636 seconds ‚Ñπ Number of ## parameters: fixed_effects=77, random_effects=0, and total=77 ‚Ñπ Maximum ## gradient= 0.00134 ‚Ñπ Negative log likelihood (NLL): ‚Ä¢ Marginal NLL= 1565.4676 ‚Ä¢ ## Total NLL= 1565.4676 ‚Ñπ Terminal SB= 1724.28719 clear()"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-demo.html","id":"length","dir":"Articles","previous_headings":"Fit > Sensitivities","what":"Length","title":"Introducing the Fisheries Integrated Modeling System (FIMS)","text":"model can fit just length data, removing age composition configurations.","code":"# Create default parameters, update with modified values, initialize FIMS, # and fit the model length_only_fit <- parameters_4_model |>   # remove rows that have module_type == AgeComp   dplyr::rows_delete(     y = tibble::tibble(module_type = \"AgeComp\")   ) |>   initialize_fims(data = data_4_model) |>   fit_fims(optimize = TRUE) ## Matching, by = \"module_type\" ## ‚úî Starting optimization ... ## ‚Ñπ Restarting optimizer 3 times to improve gradient. ## ‚Ñπ Maximum gradient went from 0.02233 to 0.00021 after 3 steps. ## ‚úî Finished optimization ## ‚úî Finished sdreport ## ‚Ñπ FIMS model version: 0.7 ‚Ñπ Total run time was 4.79269 seconds ‚Ñπ Number of ## parameters: fixed_effects=77, random_effects=0, and total=77 ‚Ñπ Maximum ## gradient= 0.00021 ‚Ñπ Negative log likelihood (NLL): ‚Ä¢ Marginal NLL= 1520.03751 ‚Ä¢ ## Total NLL= 1520.03751 ‚Ñπ Terminal SB= 1706.88667 clear()"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-logging.html","id":"importance-of-logging","dir":"Articles","previous_headings":"","what":"Importance of Logging","title":"Introducing the FIMS Logging System","text":"Logging FIMS important allows developers understand happening within model. especially useful problems arise. FIMS logging system designed handle common issues, undefined modules, dimension issues, software errors may occur model properly defined. logging system accessible R C++ messages provided using JSON format.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-logging.html","id":"how-fims-logging-works","dir":"Articles","previous_headings":"","what":"How FIMS Logging works","title":"Introducing the FIMS Logging System","text":"run time, logging messages stored C++ structure called LogEntry inst/include/common/def.hpp. structure contains useful information, information regarding LogEntry created portion code initiated creation. details regarding contents LogEntry see doxygen documentation. LogEntry(s) stored log file can accessed within R environment written disk. Additionally, file can automatically written disk R fails successfully communicate C++.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-logging.html","id":"backend-c-specification","dir":"Articles","previous_headings":"","what":"Backend C++ Specification","title":"Introducing the FIMS Logging System","text":"logging system (specified inst/include/common/def.hpp) provides three useful macro functions creating log entries, FIMS_INFO_LOG, FIMS_WARNING_LOG, FIMS_ERROR_LOG. macros take single string value argument, rest handled internally. Therefore, developer needs worry specifying message macros take care capturing elements log entry. example, FIMS_INFO_LOG used quite bit information.hpp let user know items initialized appropriately. Developers can specify information contained within string passed macro generic specific values stored inside C++ code. See example generic message completely specified user specific message uses information stored within C++ part message. Also, note C++ function fims::to_string converts numeric value string, making additive message. real-world example log entry created running FIMS model due FIMS_INFO_LOG within selectivity information.hpp. log entry specifies line file macro led log entry. screenshot shows user see log entry invoked.  Additionally, FIMS compiled -DFIMS_DEBUG pre-processing macro, output FIMS_DEBUG_LOG macro also available log file, allowing developers interactive developing experience. output macro turned main branch, thus, macro available typical user stop debugging statements polluting log file.","code":"FIMS_INFO_LOG(\"Starting to initialize the fleet structures\") FIMS_INFO_LOG(\"Initializing fleet \" + fims::to_string(f->id))"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-logging.html","id":"using-the-logging-system-in-r","dir":"Articles","previous_headings":"","what":"Using the Logging System in R","title":"Introducing the FIMS Logging System","text":"FIMS Logging System also available R, caveat! Logging R gives less information logging C++. log entry originates R, file, routine, line information absent. implementations may rectify issue. examples adding log entries R. example error level log entry, notice R stack trace routine field. Sometimes may contain useful information, time stack trace large capture root cause error. reason, ‚Äôs advised make error message detailed possible calling log_error(x) R. Note formatting better written file rather printed screen done .","code":"log_info(\"info entry from R script\") log_warning(\"warning entry from R script\") error <- log_error(\"error entry from R script\") ## before call.after call. get_log_errors() ## [1] \"[\\n{\\n\\\"timestamp\\\" : \\\"Mon Sep 29 14:35:25 2025\\\",\\n\\\"level\\\" : \\\"error\\\",\\n\\\"message\\\" : \\\"error entry from R script\\\",\\n\\\"id\\\" : \\\"0\\\",\\n\\\"user\\\" : \\\"runner\\\",\\n\\\"wd\\\" : \\\"/home/runner/work/FIMS/FIMS/vignettes\\\",\\n\\\"file\\\" : \\\"/home/runner/work/FIMS/FIMS/vignettes/R_env\\\",\\n\\\"routine\\\" : \\\"traceback: 41: .External(list(name = \\\\\\\"InternalFunction_invoke\\\\\\\", address = <pointer: 0x5651dae30980>, \\\\n        dll = list(name = \\\\\\\"Rcpp\\\\\\\", path = \\\\\\\"/home/runner/work/_temp/Library/Rcpp/libs/Rcpp.so\\\\\\\", \\\\n            dynamicLookup = TRUE, handle = <pointer: 0x5651d8edbd00>, \\\\n            info = <pointer: 0x5651dbf24920>, forceSymbols = FALSE), \\\\n        numParameters = -1L), <pointer: 0x5651d8ebfe50>, ...)\\\\n40: log_error(\\\\\\\"error entry from R script\\\\\\\")\\\\n39: eval(expr, envir)\\\\n38: eval(expr, envir)\\\\n37: withVisible(eval(expr, envir))\\\\n36: withCallingHandlers(code, message = function (cnd) \\\\n    {\\\\n        watcher$capture_plot_and_output()\\\\n        if (on_message$capture) {\\\\n            watcher$push(cnd)\\\\n        }\\\\n        if (on_message$silence) {\\\\n            invokeRestart(\\\\\\\"muffleMessage\\\\\\\")\\\\n        }\\\\n    }, warning = function (cnd) \\\\n    {\\\\n        if (getOption(\\\\\\\"warn\\\\\\\") >= 2 || getOption(\\\\\\\"warn\\\\\\\") < 0) {\\\\n            return()\\\\n        }\\\\n        watcher$capture_plot_and_output()\\\\n        if (on_warning$capture) {\\\\n            cnd <- sanitize_call(cnd)\\\\n            watcher$push(cnd)\\\\n        }\\\\n        if (on_warning$silence) {\\\\n            invokeRestart(\\\\\\\"muffleWarning\\\\\\\")\\\\n        }\\\\n    }, error = function (cnd) \\\\n    {\\\\n        watcher$capture_plot_and_output()\\\\n        cnd <- sanitize_call(cnd)\\\\n        watcher$push(cnd)\\\\n        switch(on_error, continue = invokeRestart(\\\\\\\"eval_continue\\\\\\\"), \\\\n            stop = invokeRestart(\\\\\\\"eval_stop\\\\\\\"), error = NULL)\\\\n    })\\\\n35: eval(call)\\\\n34: eval(call)\\\\n33: with_handlers({\\\\n        for (expr in tle$exprs) {\\\\n            ev <- withVisible(eval(expr, envir))\\\\n            watcher$capture_plot_and_output()\\\\n            watcher$print_value(ev$value, ev$visible, envir)\\\\n        }\\\\n        TRUE\\\\n    }, handlers)\\\\n32: doWithOneRestart(return(expr), restart)\\\\n31: withOneRestart(expr, restarts[[1L]])\\\\n30: withRestartList(expr, restarts[-nr])\\\\n29: doWithOneRestart(return(expr), restart)\\\\n28: withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])\\\\n27: withRestartList(expr, restarts)\\\\n26: withRestarts(with_handlers({\\\\n        for (expr in tle$exprs) {\\\\n            ev <- withVisible(eval(expr, envir))\\\\n            watcher$capture_plot_and_output()\\\\n            watcher$print_value(ev$value, ev$visible, envir)\\\\n        }\\\\n        TRUE\\\\n    }, handlers), eval_continue = function() TRUE, eval_stop = function() FALSE)\\\\n25: evaluate::evaluate(...)\\\\n24: evaluate(code, envir = env, new_device = FALSE, keep_warning = if (is.numeric(options$warning)) TRUE else options$warning, \\\\n        keep_message = if (is.numeric(options$message)) TRUE else options$message, \\\\n        stop_on_error = if (is.numeric(options$error)) options$error else {\\\\n            if (options$error && options$include) \\\\n                0L\\\\n            else 2L\\\\n        }, output_handler = knit_handlers(options$render, options))\\\\n23: in_dir(input_dir(), expr)\\\\n22: in_input_dir(evaluate(code, envir = env, new_device = FALSE, \\\\n        keep_warning = if (is.numeric(options$warning)) TRUE else options$warning, \\\\n        keep_message = if (is.numeric(options$message)) TRUE else options$message, \\\\n        stop_on_error = if (is.numeric(options$error)) options$error else {\\\\n            if (options$error && options$include) \\\\n                0L\\\\n            else 2L\\\\n        }, output_handler = knit_handlers(options$render, options)))\\\\n21: eng_r(options)\\\\n20: block_exec(params)\\\\n19: call_block(x)\\\\n18: process_group(group)\\\\n17: withCallingHandlers(if (tangle) process_tangle(group) else process_group(group), \\\\n        error = function(e) {\\\\n            if (progress && is.function(pb$interrupt)) \\\\n                pb$interrupt()\\\\n            if (xfun::pkg_available(\\\\\\\"rlang\\\\\\\", \\\\\\\"1.0.0\\\\\\\")) {\\\\n                if (is_R_CMD_build() || is_R_CMD_check()) {\\\\n                    cnd = tryCatch(rlang::entrace(e), error = identity)\\\\n                    error <<- format(cnd)\\\\n                }\\\\n                else {\\\\n                    rlang::entrace(e)\\\\n                }\\\\n            }\\\\n        })\\\\n16: xfun:::handle_error(withCallingHandlers(if (tangle) process_tangle(group) else process_group(group), \\\\n        error = function(e) {\\\\n            if (progress && is.function(pb$interrupt)) \\\\n                pb$interrupt()\\\\n            if (xfun::pkg_available(\\\\\\\"rlang\\\\\\\", \\\\\\\"1.0.0\\\\\\\")) {\\\\n                if (is_R_CMD_build() || is_R_CMD_check()) {\\\\n                    cnd = tryCatch(rlang::entrace(e), error = identity)\\\\n                    error <<- format(cnd)\\\\n                }\\\\n                else {\\\\n                    rlang::entrace(e)\\\\n                }\\\\n            }\\\\n        }), function(loc) {\\\\n        setwd(wd)\\\\n        write_utf8(res, output %n% stdout())\\\\n        paste0(\\\\\\\"\\\\nQuitting from \\\\\\\", loc, if (!is.null(error)) \\\\n            paste0(\\\\\\\"\\\\n\\\\\\\", rule(), error, \\\\\\\"\\\\n\\\\\\\", rule()))\\\\n    }, if (labels[i] != \\\\\\\"\\\\\\\") sprintf(\\\\\\\" [%s]\\\\\\\", labels[i]), get_loc)\\\\n15: process_file(text, output)\\\\n14: knitr::knit(knit_input, knit_output, envir = envir, quiet = quiet)\\\\n13: rmarkdown::render(envir = globalenv(), ...)\\\\n12: (function (..., seed = NULL) \\\\n    {\\\\n        if (!is.null(seed)) {\\\\n            set.seed(seed)\\\\n            if (requireNamespace(\\\\\\\"htmlwidgets\\\\\\\", quietly = TRUE)) {\\\\n                htmlwidgets::setWidgetIdSeed(seed)\\\\n            }\\\\n        }\\\\n        options(knitr.graphics.rel_path = FALSE)\\\\n        rmarkdown::render(envir = globalenv(), ...)\\\\n    })(input = base::quote(\\\\\\\"/home/runner/work/FIMS/FIMS/vignettes/fims-logging.Rmd\\\\\\\"), \\\\n        output_file = base::quote(\\\\\\\"fims-logging.html\\\\\\\"), output_dir = base::quote(\\\\\\\"/tmp/RtmpIFySOC/file1e4b1b199ee/articles\\\\\\\"), \\\\n        intermediates_dir = base::quote(\\\\\\\"/tmp/RtmpIFySOC\\\\\\\"), encoding = base::quote(\\\\\\\"UTF-8\\\\\\\"), \\\\n        seed = base::quote(1014L), output_format = base::quote(list(\\\\n            knitr = list(opts_knit = NULL, opts_chunk = list(dev = \\\\\\\"ragg_png\\\\\\\", \\\\n                dpi = 96L, fig.width = 7.29166666666667, fig.height = 4.50659250103008, \\\\n                fig.retina = 2L, dev.args = list(bg = NA), fig.ext = \\\\\\\"png\\\\\\\", \\\\n                other.parameters = list()), knit_hooks = NULL, opts_hooks = NULL, \\\\n                opts_template = NULL), pandoc = list(to = \\\\\\\"html\\\\\\\", \\\\n                from = \\\\\\\"markdown+autolink_bare_uris+tex_math_single_backslash\\\\\\\", \\\\n                args = c(\\\\\\\"--standalone\\\\\\\", \\\\\\\"--section-divs\\\\\\\", \\\\\\\"--template\\\\\\\", \\\\n                \\\\\\\"/tmp/RtmpIFySOC/pkgdown-rmd-template-1e4b4678654e.html\\\\\\\", \\\\n                \\\\\\\"--highlight-style\\\\\\\", \\\\\\\"pygments\\\\\\\"), keep_tex = FALSE, \\\\n                latex_engine = \\\\\\\"pdflatex\\\\\\\", ext = NULL, convert_fun = NULL, \\\\n                lua_filters = c(\\\\\\\"/home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua\\\\\\\", \\\\n                \\\\\\\"/home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua\\\\\\\"\\\\n                )), keep_md = FALSE, clean_supporting = FALSE, df_print = \\\\\\\"default\\\\\\\", \\\\n            pre_knit = function (...) \\\\n            {\\\\n                options(width = width)\\\\n                if (is.function(old_pre)) {\\\\n                    old_pre(...)\\\\n                }\\\\n            }, post_knit = function (...) \\\\n            {\\\\n                op(base(...), overlay(...))\\\\n            }, pre_processor = function (...) \\\\n            {\\\\n                op(base(...), overlay(...))\\\\n            }, intermediates_generator = function (original_input, \\\\n                intermediates_dir) \\\\n            {\\\\n                copy_render_intermediates(original_input, intermediates_dir, \\\\n                    !self_contained)\\\\n            }, post_processor = function (metadata, input_file, output_file, \\\\n                ...) \\\\n            {\\\\n                original_output_file <- output_file\\\\n                output_file <- overlay(metadata, input_file, output_file, \\\\n                    ...)\\\\n                if (!is.null(attr(output_file, \\\\\\\"post_process_original\\\\\\\"))) \\\\n                    base(metadata, input_file, original_output_file, \\\\n                      ...)\\\\n                base(metadata, input_file, output_file, ...)\\\\n            }, file_scope = NULL, on_exit = function () \\\\n            {\\\\n                if (is.function(base)) \\\\n                    base()\\\\n                if (is.function(overlay)) \\\\n                    overlay()\\\\n            })), output_options = base::quote(NULL), quiet = base::quote(TRUE))\\\\n11: (function (what, args, quote = FALSE, envir = parent.frame()) \\\\n    {\\\\n        if (!is.list(args)) \\\\n            stop(\\\\\\\"second argument must be a list\\\\\\\")\\\\n        if (quote) \\\\n            args <- lapply(args, enquote)\\\\n        .Internal(do.call(what, args, envir))\\\\n    })(base::quote(function (..., seed = NULL) \\\\n    {\\\\n        if (!is.null(seed)) {\\\\n            set.seed(seed)\\\\n            if (requireNamespace(\\\\\\\"htmlwidgets\\\\\\\", quietly = TRUE)) {\\\\n                htmlwidgets::setWidgetIdSeed(seed)\\\\n            }\\\\n        }\\\\n        options(knitr.graphics.rel_path = FALSE)\\\\n        rmarkdown::render(envir = globalenv(), ...)\\\\n    }), base::quote(list(input = \\\\\\\"/home/runner/work/FIMS/FIMS/vignettes/fims-logging.Rmd\\\\\\\", \\\\n        output_file = \\\\\\\"fims-logging.html\\\\\\\", output_dir = \\\\\\\"/tmp/RtmpIFySOC/file1e4b1b199ee/articles\\\\\\\", \\\\n        intermediates_dir = \\\\\\\"/tmp/RtmpIFySOC\\\\\\\", encoding = \\\\\\\"UTF-8\\\\\\\", \\\\n        seed = 1014L, output_format = list(knitr = list(opts_knit = NULL, \\\\n            opts_chunk = list(dev = \\\\\\\"ragg_png\\\\\\\", dpi = 96L, fig.width = 7.29166666666667, \\\\n                fig.height = 4.50659250103008, fig.retina = 2L, dev.args = list(\\\\n                    bg = NA), fig.ext = \\\\\\\"png\\\\\\\", other.parameters = list()), \\\\n            knit_hooks = NULL, opts_hooks = NULL, opts_template = NULL), \\\\n            pandoc = list(to = \\\\\\\"html\\\\\\\", from = \\\\\\\"markdown+autolink_bare_uris+tex_math_single_backslash\\\\\\\", \\\\n                args = c(\\\\\\\"--standalone\\\\\\\", \\\\\\\"--section-divs\\\\\\\", \\\\\\\"--template\\\\\\\", \\\\n                \\\\\\\"/tmp/RtmpIFySOC/pkgdown-rmd-template-1e4b4678654e.html\\\\\\\", \\\\n                \\\\\\\"--highlight-style\\\\\\\", \\\\\\\"pygments\\\\\\\"), keep_tex = FALSE, \\\\n                latex_engine = \\\\\\\"pdflatex\\\\\\\", ext = NULL, convert_fun = NULL, \\\\n                lua_filters = c(\\\\\\\"/home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua\\\\\\\", \\\\n                \\\\\\\"/home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua\\\\\\\"\\\\n                )), keep_md = FALSE, clean_supporting = FALSE, df_print = \\\\\\\"default\\\\\\\", \\\\n            pre_knit = function (...) \\\\n            {\\\\n                options(width = width)\\\\n                if (is.function(old_pre)) {\\\\n                    old_pre(...)\\\\n                }\\\\n            }, post_knit = function (...) \\\\n            {\\\\n                op(base(...), overlay(...))\\\\n            }, pre_processor = function (...) \\\\n            {\\\\n                op(base(...), overlay(...))\\\\n            }, intermediates_generator = function (original_input, \\\\n                intermediates_dir) \\\\n            {\\\\n                copy_render_intermediates(original_input, intermediates_dir, \\\\n                    !self_contained)\\\\n            }, post_processor = function (metadata, input_file, output_file, \\\\n                ...) \\\\n            {\\\\n                original_output_file <- output_file\\\\n                output_file <- overlay(metadata, input_file, output_file, \\\\n                    ...)\\\\n                if (!is.null(attr(output_file, \\\\\\\"post_process_original\\\\\\\"))) \\\\n                    base(metadata, input_file, original_output_file, \\\\n                      ...)\\\\n                base(metadata, input_file, output_file, ...)\\\\n            }, file_scope = NULL, on_exit = function () \\\\n            {\\\\n                if (is.function(base)) \\\\n                    base()\\\\n                if (is.function(overlay)) \\\\n                    overlay()\\\\n            }), output_options = NULL, quiet = TRUE)), envir = base::quote(<environment>), \\\\n        quote = base::quote(TRUE))\\\\n10: base::do.call(base::do.call, base::c(base::readRDS(\\\\\\\"/tmp/RtmpIFySOC/callr-fun-1e4b1a5bb99a\\\\\\\"), \\\\n        base::list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, \\\\n        quote = TRUE)\\\\n9: base::saveRDS(base::do.call(base::do.call, base::c(base::readRDS(\\\\\\\"/tmp/RtmpIFySOC/callr-fun-1e4b1a5bb99a\\\\\\\"), \\\\n       base::list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, \\\\n       quote = TRUE), file = \\\\\\\"/tmp/RtmpIFySOC/callr-res-1e4b4cb71ee5\\\\\\\", \\\\n       compress = FALSE)\\\\n8: base::withCallingHandlers({\\\\n       NULL\\\\n       base::saveRDS(base::do.call(base::do.call, base::c(base::readRDS(\\\\\\\"/tmp/RtmpIFySOC/callr-fun-1e4b1a5bb99a\\\\\\\"), \\\\n           base::list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, \\\\n           quote = TRUE), file = \\\\\\\"/tmp/RtmpIFySOC/callr-res-1e4b4cb71ee5\\\\\\\", \\\\n           compress = FALSE)\\\\n       base::flush(base::stdout())\\\\n       base::flush(base::stderr())\\\\n       NULL\\\\n       base::invisible()\\\\n   }, error = function(e) {\\\\n       {\\\\n           callr_data <- base::as.environment(\\\\\\\"tools:callr\\\\\\\")$`__callr_data__`\\\\n           err <- callr_data$err\\\\n           if (FALSE) {\\\\n               base::assign(\\\\\\\".Traceback\\\\\\\", base::.traceback(4), envir = callr_data)\\\\n               utils::dump.frames(\\\\\\\"__callr_dump__\\\\\\\")\\\\n               base::assign(\\\\\\\".Last.dump\\\\\\\", .GlobalEnv$`__callr_dump__`, \\\\n                   envir = callr_data)\\\\n               base::rm(\\\\\\\"__callr_dump__\\\\\\\", envir = .GlobalEnv)\\\\n           }\\\\n           e <- err$process_call(e)\\\\n           e2 <- err$new_error(\\\\\\\"error in callr subprocess\\\\\\\")\\\\n           class <- base::class\\\\n           class(e2) <- base::c(\\\\\\\"callr_remote_error\\\\\\\", class(e2))\\\\n           e2 <- err$add_trace_back(e2)\\\\n           cut <- base::which(e2$trace$scope == \\\\\\\"global\\\\\\\")[1]\\\\n           if (!base::is.na(cut)) {\\\\n               e2$trace <- e2$trace[-(1:cut), ]\\\\n           }\\\\n           base::saveRDS(base::list(\\\\\\\"error\\\\\\\", e2, e), file = base::paste0(\\\\\\\"/tmp/RtmpIFySOC/callr-res-1e4b4cb71ee5\\\\\\\", \\\\n               \\\\\\\".error\\\\\\\"))\\\\n       }\\\\n   }, interrupt = function(e) {\\\\n       {\\\\n           callr_data <- base::as.environment(\\\\\\\"tools:callr\\\\\\\")$`__callr_data__`\\\\n           err <- callr_data$err\\\\n           if (FALSE) {\\\\n               base::assign(\\\\\\\".Traceback\\\\\\\", base::.traceback(4), envir = callr_data)\\\\n               utils::dump.frames(\\\\\\\"__callr_dump__\\\\\\\")\\\\n               base::assign(\\\\\\\".Last.dump\\\\\\\", .GlobalEnv$`__callr_dump__`, \\\\n                   envir = callr_data)\\\\n               base::rm(\\\\\\\"__callr_dump__\\\\\\\", envir = .GlobalEnv)\\\\n           }\\\\n           e <- err$process_call(e)\\\\n           e2 <- err$new_error(\\\\\\\"error in callr subprocess\\\\\\\")\\\\n           class <- base::class\\\\n           class(e2) <- base::c(\\\\\\\"callr_remote_error\\\\\\\", class(e2))\\\\n           e2 <- err$add_trace_back(e2)\\\\n           cut <- base::which(e2$trace$scope == \\\\\\\"global\\\\\\\")[1]\\\\n           if (!base::is.na(cut)) {\\\\n               e2$trace <- e2$trace[-(1:cut), ]\\\\n           }\\\\n           base::saveRDS(base::list(\\\\\\\"error\\\\\\\", e2, e), file = base::paste0(\\\\\\\"/tmp/RtmpIFySOC/callr-res-1e4b4cb71ee5\\\\\\\", \\\\n               \\\\\\\".error\\\\\\\"))\\\\n       }\\\\n   }, callr_message = function(e) {\\\\n       base::try(base::signalCondition(e))\\\\n   })\\\\n7: doTryCatch(return(expr), name, parentenv, handler)\\\\n6: tryCatchOne(expr, names, parentenv, handlers[[1L]])\\\\n5: tryCatchList(expr, names[-nh], parentenv, handlers[-nh])\\\\n4: doTryCatch(return(expr), name, parentenv, handler)\\\\n3: tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), \\\\n       names[nh], parentenv, handlers[[nh]])\\\\n2: tryCatchList(expr, classes, parentenv, handlers)\\\\n1: base::tryCatch(base::withCallingHandlers({\\\\n       NULL\\\\n       base::saveRDS(base::do.call(base::do.call, base::c(base::readRDS(\\\\\\\"/tmp/RtmpIFySOC/callr-fun-1e4b1a5bb99a\\\\\\\"), \\\\n           base::list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, \\\\n           quote = TRUE), file = \\\\\\\"/tmp/RtmpIFySOC/callr-res-1e4b4cb71ee5\\\\\\\", \\\\n           compress = FALSE)\\\\n       base::flush(base::stdout())\\\\n       base::flush(base::stderr())\\\\n       NULL\\\\n       base::invisible()\\\\n   }, error = function(e) {\\\\n       {\\\\n           callr_data <- base::as.environment(\\\\\\\"tools:callr\\\\\\\")$`__callr_data__`\\\\n           err <- callr_data$err\\\\n           if (FALSE) {\\\\n               base::assign(\\\\\\\".Traceback\\\\\\\", base::.traceback(4), envir = callr_data)\\\\n               utils::dump.frames(\\\\\\\"__callr_dump__\\\\\\\")\\\\n               base::assign(\\\\\\\".Last.dump\\\\\\\", .GlobalEnv$`__callr_dump__`, \\\\n                   envir = callr_data)\\\\n               base::rm(\\\\\\\"__callr_dump__\\\\\\\", envir = .GlobalEnv)\\\\n           }\\\\n           e <- err$process_call(e)\\\\n           e2 <- err$new_error(\\\\\\\"error in callr subprocess\\\\\\\")\\\\n           class <- base::class\\\\n           class(e2) <- base::c(\\\\\\\"callr_remote_error\\\\\\\", class(e2))\\\\n           e2 <- err$add_trace_back(e2)\\\\n           cut <- base::which(e2$trace$scope == \\\\\\\"global\\\\\\\")[1]\\\\n           if (!base::is.na(cut)) {\\\\n               e2$trace <- e2$trace[-(1:cut), ]\\\\n           }\\\\n           base::saveRDS(base::list(\\\\\\\"error\\\\\\\", e2, e), file = base::paste0(\\\\\\\"/tmp/RtmpIFySOC/callr-res-1e4b4cb71ee5\\\\\\\", \\\\n               \\\\\\\".error\\\\\\\"))\\\\n       }\\\\n   }, interrupt = function(e) {\\\\n       {\\\\n           callr_data <- base::as.environment(\\\\\\\"tools:callr\\\\\\\")$`__callr_data__`\\\\n           err <- callr_data$err\\\\n           if (FALSE) {\\\\n               base::assign(\\\\\\\".Traceback\\\\\\\", base::.traceback(4), envir = callr_data)\\\\n               utils::dump.frames(\\\\\\\"__callr_dump__\\\\\\\")\\\\n               base::assign(\\\\\\\".Last.dump\\\\\\\", .GlobalEnv$`__callr_dump__`, \\\\n                   envir = callr_data)\\\\n               base::rm(\\\\\\\"__callr_dump__\\\\\\\", envir = .GlobalEnv)\\\\n           }\\\\n           e <- err$process_call(e)\\\\n           e2 <- err$new_error(\\\\\\\"error in callr subprocess\\\\\\\")\\\\n           class <- base::class\\\\n           class(e2) <- base::c(\\\\\\\"callr_remote_error\\\\\\\", class(e2))\\\\n           e2 <- err$add_trace_back(e2)\\\\n           cut <- base::which(e2$trace$scope == \\\\\\\"global\\\\\\\")[1]\\\\n           if (!base::is.na(cut)) {\\\\n               e2$trace <- e2$trace[-(1:cut), ]\\\\n           }\\\\n           base::saveRDS(base::list(\\\\\\\"error\\\\\\\", e2, e), file = base::paste0(\\\\\\\"/tmp/RtmpIFySOC/callr-res-1e4b4cb71ee5\\\\\\\", \\\\n               \\\\\\\".error\\\\\\\"))\\\\n       }\\\\n   }, callr_message = function(e) {\\\\n       base::try(base::signalCondition(e))\\\\n   }), error = function(e) {\\\\n       NULL\\\\n       if (FALSE) {\\\\n           base::try(base::stop(e))\\\\n       }\\\\n       else {\\\\n           base::invisible()\\\\n       }\\\\n   }, interrupt = function(e) {\\\\n       NULL\\\\n       if (FALSE) {\\\\n           e\\\\n       }\\\\n       else {\\\\n           base::invisible()\\\\n       }\\\\n   })\\\\n\\\",\\n\\\"line\\\" : \\\"-1\\\"\\n}\\n]\""},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-logging.html","id":"fims-logging-functions-in-r","dir":"Articles","previous_headings":"Using the Logging System in R","what":"FIMS Logging Functions in R","title":"Introducing the FIMS Logging System","text":"several exported logging functions FIMS packages. find following functions, use methods::show() view documentation.","code":"ls(\"package:FIMS\") |>   grep(pattern = \"_log|log_\", value = TRUE) |>   cli::cli_bullets() ## get_log ## get_log_errors ## get_log_module ## get_log_warnings ## inv_logit ## log_error ## log_info ## log_warning ## set_log_throw_on_error # Get documentation for log_error methods::show(log_error) ## internal C++ function <0x5651d8ebfe50> ##     docstring : Adds a error entry to the log from the R environment. ##     signature : void log_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-logging.html","id":"example-of-fims-logging-from-r","dir":"Articles","previous_headings":"","what":"Example of FIMS logging from R","title":"Introducing the FIMS Logging System","text":"Assuming model already defined object default_parameters, example using logging system FIMS R. Another useful option set_throw_on_error(). option set TRUE, FIMS abort immediately error occurs write_log(TRUE) previously called, log file written FIMS terminates session. example throw error.","code":"fit <- default_parameters |>   initialize_fims(data = data_4_model) |>   fit_fims(optimize = TRUE) ## ‚úî Starting optimization ... ## ‚Ñπ Restarting optimizer 3 times to improve gradient. ## ‚Ñπ Maximum gradient went from 0.00915 to 0.00057 after 3 steps. ## ‚úî Finished optimization ## ‚úî Finished sdreport ## ‚Ñπ FIMS model version: 0.7 ## ‚Ñπ Total run time was 6.38521 seconds ## ‚Ñπ Number of parameters: fixed_effects=77, random_effects=0, and total=77 ## ‚Ñπ Maximum gradient= 0.00057 ## ‚Ñπ Negative log likelihood (NLL): ## ‚Ä¢ Marginal NLL= 3240.1261 ## ‚Ä¢ Total NLL= 3240.1261 ## ‚Ñπ Terminal SB= 1803.27839 # get the log as a string in JSON format and parse into a list log_str <- as.character(get_log()) write(log_str, \"log.json\") log_json <- jsonlite::fromJSON(log_str)  # get log warnings only log_warnings_str <- get_log_warnings()  # get log errors only log_errors_str <- get_log_errors()  # get log entries from the information module information_log <- get_log_module(\"information\") set_log_throw_on_error(TRUE) log_error(\"throwing now!\")"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-path-maturity.html","id":"modules-in-r","dir":"Articles","previous_headings":"","what":"Modules in R","title":"FIMS Path: Maturity","text":"FIMS comprised several modules can linked together create model. maturity module just one serve example vignette. Modules written C++ linked R using Rcpp. retrieve module C++ code must set R populated parameters. loading FIMS default data set comes FIMS, maturity module can created using list. easiest populate list using wrapper functions written R. list specifies module created can updated defaults using [update_parameters()]. often easier create defaults update rather creating list wrapper functions ensure proper structure used. way memorize structure supposed look like. Last, list used create module, using another wrapper function. power users, methods package can used call Rcpp create module without using lists parameters wrapper functions. following code also creates maturity module. run FIMS model, modules just maturity module need linked population module. , example includes maturity module code just pseudo code showing link maturity module population module. code assumes growth recruitment modules, .e., modules 2 3, already set . power users, methods package can used call Rcpp create population module without using lists parameters wrapper functions. FIMS sets objects stored memory simply running rm(population) free memory back . Instead, users need use clear(), function written Rcpp interface callable R. Restarting closing R session also work free memory.","code":"# Load the FIMS package library(FIMS)  # Load a built-in data set from the FIMS package data(\"data1\")  # Convert the data into a FIMSFrame object, which is an S4 class. # See ?FIMSFrame for more information. fims_frame <- FIMSFrame(data1)  # Create default maturity parameters using internal function default_parameters <- create_default_configurations(fims_frame) |>   tidyr::unnest(cols = data) |>   FIMS:::create_default_maturity(data = fims_frame)  show(default_parameters) #> # A tibble: 2 √ó 13 #>   model_family module_name module_type label  distribution_link fleet_name   age #>   <chr>        <chr>       <chr>       <chr>  <chr>             <chr>      <dbl> #> 1 NA           Maturity    Logistic    infle‚Ä¶ NA                NA            NA #> 2 NA           Maturity    Logistic    slope  NA                NA            NA #> # ‚Ñπ 6 more variables: length <dbl>, time <int>, value <dbl>, #> #   estimation_type <chr>, distribution_type <chr>, distribution <chr>  # The default maturity parameters can be updated parameters <- default_parameters |>   dplyr::rows_update(     tibble::tibble(       model_family = \"catch_at_age\",       module_name = \"Maturity\",       label = c(\"inflection_point\", \"slope\"),       value = c(2.25, 3),     ),     by = c(\"module_name\", \"label\")   )  show(parameters) #> # A tibble: 2 √ó 13 #>   model_family module_name module_type label  distribution_link fleet_name   age #>   <chr>        <chr>       <chr>       <chr>  <chr>             <chr>      <dbl> #> 1 catch_at_age Maturity    Logistic    infle‚Ä¶ NA                NA            NA #> 2 catch_at_age Maturity    Logistic    slope  NA                NA            NA #> # ‚Ñπ 6 more variables: length <dbl>, time <int>, value <dbl>, #> #   estimation_type <chr>, distribution_type <chr>, distribution <chr>  # Initialize maturity module based on the list of parameters maturity <- FIMS:::initialize_maturity(   parameters = parameters,   data = fims_frame ) # load FIMS library(FIMS) # Create a new maturity model maturity <- methods::new(LogisticMaturity) # Populate the maturity module with parameter values. maturity$inflection_point[1]$value <- 10 maturity$inflection_point[1]$estimation_type$set(\"constant\") maturity$slope[1]$value <- 0.2 maturity$slope[1]$estimation_type$set(\"constant\") # Initialize the population module and link the maturity module # The IDs of the growth and recruitment modules are pseudo code and don't exist population <- create_default_configurations(fims_frame) |>   tidyr::unnest(cols = data) |>   FIMS:::create_default_Population(data = fims_frame, log_rzero = log(1000000)) |>   dplyr::mutate(model_family = \"catch_at_age\") |>   dplyr::bind_rows(parameters) |>   FIMS:::initialize_population(     data = fims_frame,     linked_ids = setNames(       c(maturity$get_id(), 2, 3),       c(\"maturity\", \"growth\", \"recruitment\")     )   ) population <- methods::new(Population) population$SetMaturityID(maturity$get_id()) population$SetGrowthID(2) population$SetRecruitmentID(3) # Clear C++ memory clear() # Clear R memory rm(list = ls())"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-path-maturity.html","id":"rcpp-interface","dir":"Articles","previous_headings":"","what":"Rcpp Interface","title":"FIMS Path: Maturity","text":"module, Rcpp code rcpp_interface.hpp defines fields R user can see set. Additional code methods, e.g., get_id, constructors, destructors defined module .hpp files found inst/include/interface/rcpp directory. fields methods listed module interface, see , exposed R user. Additionally, directory stores code Rcpp functions like clear(). code shows two fields specific maturity module (.e., parameters), inflection_point slope, methods (.e., functions), get_id evaluate. get_id method returns unique ID created module. , can multiple instances maturity module defined memory one can used per model. Methods functions can called R. can view fields methods exposed R user Rcpp class passing quoted name inside round brackets call Rcpp::class_<*>(\"\") unquoted string methods::show(), e.g., methods::show(LogisticMaturity). LogisticMaturity references maturity rcpp class, LogisticMaturityInterface defined rcpp_maturity.hpp directory inst/include/interface/rcpp/rcpp_objects. file consists MaturityInterfaceBase class LogisticMaturityInterface class, former parent class latter child class. Sometimes multiple child classes parent class now, one child class, .e., option, maturity. child classes referenced R, parent classes just used Rcpp set structure.  Rcpp interface classes FIMS define parameters (e.g., inflection_point, slope) using ParameterVector class defined rcpp_interface_base.hpp directory inst/include/interface/rcpp/rcpp_objects. ParameterVectors allow parameters vary time. Whereas, Parameter class used time-invariant parameters. fields classes accessible R defined rcpp_interface.hpp file directory inst/include/interface/rcpp. example, field (.e., parameter) maturity (.e., maturity module defined R) therefore inherit five fields defined Parameter class: value, min, max, estimation_type. , two parameter fields 10 fields within parameters.","code":"Rcpp::class_<LogisticMaturityInterface>(\"LogisticMaturity\")   .constructor()   .field(\"inflection_point\", &LogisticMaturityInterface::inflection_point)   .field(\"slope\", &LogisticMaturityInterface::slope)   .method(\"get_id\", &LogisticMaturityInterface::get_id)   .method(\"evaluate\", &LogisticMaturityInterface::evaluate); class MaturityInterfaceBase : public FIMSRcppInterfaceBase {  public:   static uint32_t id_g; /**< static id of the maturity interface base */   uint32_t id;          /**< id of the maturity interface base */   ... }  class LogisticMaturityInterface : public MaturityInterfaceBase {  public:   /**    * @brief The value of the dependent variable at which the response reaches    * 0.5.    */   Parameter inflection_point;   /**    * @brief The width of the curve at the inflection_point.    */   Parameter slope;   ... } Rcpp::class_<Parameter>(\"Parameter\")   .constructor()   .constructor<double>()   .constructor<Parameter>()   .field(\"value\", &Parameter::value)   .field(\"min\", &Parameter::min)   .field(\"max\", &Parameter::max)   .field(\"estimation_type\", &Parameter::estimation_type);"},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-path-maturity.html","id":"what-is-a-namespace","dir":"Articles","previous_headings":"fims namespace","what":"What is a namespace?","title":"FIMS Path: Maturity","text":"namespace C++ similar library R. core FIMS within fims namespace namespace convenient way differentiate part C++ code base portable, .e., independent statistical platform, part codebase depends platforms outside base C++ (e.g., Rcpp, R, TMB). code written within: considered part fims namespace. C++ classes written within fims namespace can accessed within C++ code base using fims_popdy::. exceptions TMB specific code referenced within fims namespace. cases, code written within #ifdef TMB_MODEL wrapper, means code defined TMB used. Given addition new platform, e.g., stan, new wrapper added define platform specific code sections. example, definition data types inst/include/interface/interface.hpp always platform dependent platform specific requirements data types defined. Whenever new platform added FIMS, need set platform specific data type definitions. example definition.","code":"namespace fims{    } namespace fims {  #ifdef TMB_MODEL /**  * @brief fims::ModelTraits class that contains the DataVector  * and ParameterVector types.  */ template <typename Type> struct fims::ModelTraits {   typedef typename CppAD::vector<Type> DataVector; /**< A vector         of the data that is differentiable */   typedef typename CppAD::vector<Type> ParameterVector; /**< A   vector of the parameters that is differentiable */   typedef typename tmbutils::vector<Type>       EigenVector; /**< A vector as defined in the Eigen namespace in TMB */ }; #endif /* TMB_MODEL */ }  // namespace fims  //not developed yet #ifdef STAN_MODEL //stan specific definitions go here #endif"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-path-maturity.html","id":"maturity-example","dir":"Articles","previous_headings":"fims namespace","what":"Maturity example","title":"FIMS Path: Maturity","text":"Rcpp interface object includes add_to_fims_tmb() function. two shared pointers set within function, one link Rcpp interface object (e.g., LogisticMaturityInterface) Information class fims namespace defined inst/include/common/information.hpp one link matching class fims namespace. maturity example, LogisticMaturity class fims namespace defined inst/include/population_dynamics/maturity/functors/logistic.hpp. Within rcpp_maturity.hpp, link fims_info::Information class register maturity parameters specify whether random effects. setting two pointers interface, info points information, maturity points logistic maturity module. Linking fims_popdy::LogisticMaturity class allows code link values input R values used estimation parameters fitting data model. example link maturity. can also link two pointers together fims_info::Information class links fims_popdy::LogisticMaturity, details later. add_to_fims_tmb function repeats add_to_fims_tmb_internal four times track estimated value parameter along first, second, third derivatives.","code":"// file: rcpp_maturity.hpp  // info is a shared pointer that points to fims_info::Information std::shared_ptr<fims_info::Information<TMB_FIMS_REAL_TYPE> > info =         fims_info::Information<TMB_FIMS_REAL_TYPE>::GetInstance();  if (this->inflection_point.estimation_type == \"random_effects\") {         /*          if inflection_point is a random effect,           the inflection_point value from LogisticMaturityInterface (maturity->inflection_point)           is passed to the Information member function RegisterRandomEffect         */         info->RegisterRandomEffect(maturity->inflection_point);   }   if (this->inflection_point.estimation_type == \"fixed_effects\") {         /*          if inflection_point is estimated as a fixed_effect,          the inflection_point value from LogisticMaturityInterface (maturity->inflection_point)          is passed to the Information member function RegisterParameter          */         info->RegisterParameter(maturity->inflection_point);   } // file: rcpp_maturity.hpp  // maturity is a shared pointer that points to fims_popdy::LogisticMaturity std::shared_ptr<fims_popdy::LogisticMaturity<TMB_FIMS_REAL_TYPE> > maturity =   std::make_shared<fims_popdy::LogisticMaturity<TMB_FIMS_REAL_TYPE> >();   // the inflection_point value from LogisticMaturity (maturity->inflection_point) // equals the inflection_point value from LogisticMaturityInterface // (this->inflection_point.value) maturity->inflection_point = this->inflection_point.value; // file: rcpp_maturity.hpp  // the maturity_models pointer from Information that matches the  // id of the fims_popdy::LogisticMaturity class is equal to the pointer  // to fims_popdy::LogisticMaturity  info->maturity_models[maturity->id] = maturity;"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-path-maturity.html","id":"fims_popdylogisticmaturity-class","dir":"Articles","previous_headings":"","what":"fims_popdy::LogisticMaturity class","title":"FIMS Path: Maturity","text":"LogisticMaturity class fims namespace defined inst/include/population_dynamics/maturity/functors/logistic.hpp evaluate method (.e., function) takes input, x returns output logistic function (defined inst/include/common/fims_math.hpp) using class members inflection_point slope values. modules use logistic function use function fims_math.hpp, e.g., logistic selectivity, thus, logistic equation defined within source code used multiple modules.","code":"namespace fims_popdy {  /**  * @brief LogisticMaturity class that returns the logistic function value  * from fims_math.  */ template <typename Type> struct LogisticMaturity : public MaturityBase<Type> {   Type inflection_point; /**< 50 percent quantile of the value of the quantity of interest (x); e.g.,                age at which 50 percent of the fish are mature */   Type slope;  /**<scalar multiplier of difference between quantity of interest                value (x) and inflection_point */    LogisticMaturity() : MaturityBase<Type>() {}    /**    * @brief Method of the logistic maturity class that implements the    * logistic function from FIMS math.    *    * @param x The independent variable in the logistic function (e.g., age or    * size at maturity).    */   virtual const Type evaluate(const Type& x) {     return fims_math::logistic<Type>(inflection_point, slope, x);   } };  }  // namespace fims"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-path-maturity.html","id":"population-class","dir":"Articles","previous_headings":"","what":"Population class","title":"FIMS Path: Maturity","text":"Population class defined inst/include/population_dynamics/population/population.hpp biological calculations happen, producing expected values used likelihood equations derived quantities important management (e.g., spawning biomass). shared pointer links maturity module population must set model can evaluate maturity within Population class. maturity_id set R using SetMaturity() method PopulationInterface class, reminder done internally within FIMS::initialize_population can also done hand SetMaturity. options shown, , . Notice population default declares pointer type MaturityBase (parent class), specific maturity class using example, .e., LogisticMaturity (child class). MaturityBase evaluate method input arguments match inputs child class: evaluate function virtual C++ function, means function can overwritten functions name child class. structure keeps maturity module population generic. don‚Äôt need conditional statements loop possible maturity formulations within population. need add new child maturity class Rcpp interface can automatically call population. trade-. creating nested hierarchical structure makes code base harder read. exchange, ‚Äôre creating code lower cyclomatic complexity, , ever one independent path user maturity->evaluate() call population, regardless many maturity functions added FIMS. Code lower cyclomatic complexity easier test, maintain, extend. set shared pointer, can access maturity within population.","code":"// file: inst/include/population_dynamics/population/population.hpp // maturity is a shared pointer to MaturityBase  // id of the maturity model object int maturity_id = -999; // shared pointer to the maturity module std::shared_ptr<fims_popdy::MaturityBase<Type>> maturity; # Helper function population <- create_default_configurations(fims_frame) |>   tidyr::unnest(cols = data) |>   FIMS:::create_default_Population(data = fims_frame, log_rzero = log(1000000)) |>   dplyr::mutate(model_family = \"catch_at_age\") |>   dplyr::bind_rows(parameters) |>   FIMS:::initialize_population(     data = fims_frame,     linked_ids = setNames(       c(maturity$get_id(), 2, 3),       c(\"maturity\", \"growth\", \"recruitment\")     )   )  # Manual population$SetMaturity(maturity$get_id()) // file: inst/include/population_dynamics/maturity/functors/maturity_base.hpp namespace fims_popdy {  /**  * @brief Base class for all maturity functors.  * @tparam TypeThe type of the maturity functor.  */  template <typename Type> struct MaturityBase : public fims_model_object::FIMSObject<Type> {   // id_g is the ID of the instance of the MaturityBase class.   // this is like a memory tracker.   // Assigning each one its own ID is a way to keep track of   // all the instances of the MaturityBase class.   static uint32_t id_g; /**< The ID of the instance of the MaturityBase class */    /**    * @brief Constructor    */   MaturityBase() {     // increment id of the singleton maturity class     this->id = MaturityBase::id_g++;   }    /**    * @brief Calculates the maturity.    * @param x The independent variable in the maturity function (e.g., logistic    * maturity at age or size).    */   virtual const Type evaluate(const Type& x) = 0; };  } // file: inst/include/population_dynamics/population/population.hpp  /**   * @brief Calculates expected proportion of individuals mature at a selected   * age.   *   * @param i_age_year dimension folded index for age and year   * @param age the age of maturity   */   void CalculateMaturityAA(size_t i_age_year, size_t age) {     // this->maturity is pointing to the maturity module, which has     // an evaluate function. -> can be nested.     this->proportion_mature_at_age[i_age_year] =       this->maturity->evaluate(ages[age]);   }"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-path-maturity.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"FIMS Path: Maturity","text":"material demonstrates values passed R propagated population.hpp, used biologically relevant calculations. , however, relies population referencing correct child class (e.g., LogisticMaturity) even though calls parent class (MaturityBase). defined maturity_id population specific logistic maturity module wanted use, population$SetMaturity(maturity$get_id()), still need connect ID actual module memory. information managed FIMS Information class inst/include/common/information.hpp. Information class sets number C++ maps (container key value mapped value - think named lists R) key unique ID module mapped value shared pointer module. C++ std::maps iterator member stepping elements map. iterator also declared Information class can loop unique maturity modules called FIMS. currently one FIMS ever extended include multiple populations, unique maturity module population subset populations.  Next, let‚Äôs revisit line code written Rcpp LogisticMaturityInterface class inst/include/interface/rcpp/rcpp_objects/rcpp_maturity.hpp. , setting maturity_models pointer Information equal maturity pointer LogisticMaturity module.  Now need pass pointer maturity pointer population population->maturity points LogisticMaturity module instead MaturityBase. First set map Information points Population.  Populations looped new shared pointer, p, reference individual population interest. code chunk, (*) refers single population populations map. second element map pointer, p = (*).second means pointer set single population equal pointer populations map. Within population loop, maturity pointer population linked maturity pointer information, passing information want use LogisticMaturity class. , (*) referring maturity_models map information (*).second refers second element map, pointer maturity module.","code":"// file: inst/include/common/information.hpp // uint32_t is an unsigned integer (always positive) // The first component of the map is a uint32_t which will be used to hold the // ID. The second component of the map is the shared pointer, maturity_models, // that points to fims_popdy::MaturityBase  // hash map to link each object to its shared location in memory std::map<uint32_t, std::shared_ptr<fims_popdy::MaturityBase<Type> > >   maturity_models;  // Next we set up the iterator, which will be used to loop over all // defined maturity modules typedef typename std::map<uint32_t,                            std::shared_ptr<fims_popdy::MaturityBase<Type> > >::iterator   maturity_models_iterator; // file: rcpp_maturity.hpp  // the maturity_models pointer from Information that matches the id of the // fims_popdy::LogisticMaturity class is equal to the pointer to // fims_popdy::LogisticMaturity info->maturity_models[maturity->id] = maturity; // file: inst/include/common/information.hpp  // hash map to link each object to its shared location in                       memory std::map<uint32_t, std::shared_ptr<fims_popdy::Population<Type> > > populations;   typedef typename std::map<uint32_t,                             std::shared_ptr<fims_popdy::Population<Type> > >::iterator     population_iterator; // iterator for population objects // file: inst/include/common/information.hpp for (population_iterator it = this->populations.begin();      it != this->populations.end(); ++it) {   std::shared_ptr<fims_popdy::Population<Type> > p = (*it).second;   ... } // file: inst/include/common/information.hpp   // set maturity   if (p->maturity_id != -999) {     uint32_t maturity_uint = static_cast<uint32_t>(p->maturity_id);     maturity_models_iterator it = this->maturity_models.find(maturity_uint);     // >maturity_models is specified in     // information.hpp and used in rcpp      if (it != this->maturity_models.end()) {       // p->maturity is the maturity pointer in population       // (*it).second is the maturity pointer in information       p->maturity = (*it).second;  // >maturity defined in population.hpp     }    }"},{"path":"https://NOAA-FIMS.github.io/FIMS/articles/fims-path-maturity.html","id":"thinking-in-r","dir":"Articles","previous_headings":"","what":"Thinking in R","title":"FIMS Path: Maturity","text":"optional exercise benefit reviewing happening Rcpp code accessed within R translate C++ code similar R code. , first section code think concept R second section use Rcpp R think C++ code R terms. latter sections, commented help distinguish two code sets. idea link happening C++ code FIMS language familiar , .e., R. three populations included example, first two mirrored logistic maturity function third different maturity function. third function different function together logistic function different parameter set. example, third maturity function logistic function different parameter set. Note additional modules included population, e.g., growth, ignored example. population_modules maturity_modules equivalent instantiated C++ classes stored memory. R code chunk comparable using Rcpp R set modules store memory. Next, maturity IDS assigned maturity_id one three populations. actually done using SetMaturity R (.e., commented code). FIMS, Information class objects, population maturity, C++ maps. first element map ID, second element map pointer Population Maturity class. can thought R using list C++ maps used. Pointers used link Information respective module. FIMS, definitions happen passing information rcpp interface FIMS Information rcpp_maturity.hpp, info pointer information maturity pointer specific maturity module. population module defined information must looped set maturity defined user-specified Rcpp interface back Population class used run calculations model. R, code sets intermediate value, p. maturity p updated equal correct maturity module, p$pointer$maturity <- information$maturity[[newit]][[2]], code passes back population_modules, population_modules[[]][2]$maturity <- p$pointer$maturity. context, population_modules population class held memory used run calculations. deeper level abstraction happening C++ FIMS, p population module stored memory. equivalent line code population_modules[[]][2]$maturity <- p$pointer$maturity isn‚Äôt needed FIMS update p, also updating population class held memory used run calculations.","code":"population_modules <- list(   \"Pop 1\" = list(     id = 1,     maturity = \"MaturityBase\"   ),   \"Pop 2\" = list(     id = 2,     maturity = \"MaturityBase\"   ),   \"Pop 3\" = list(     id = 3,     maturity = \"MaturityBase\"   ) ) maturity_modules <- list(   \"Logistic Maturity\" = list(id = 1, inflection_point = 10, slope = 0.2),   \"Some Other Maturity\" = list(id = 2, inflection_point = 8, slope = 0.3) ) # maturity1 <- methods::new(LogisticMaturity) # maturity1$inflection_point$value <- 10 # maturity1$slope$value <- 0.2 # maturity2 <- methods::new(LogisticMaturity) # maturity2$inflection_point$value <- 8 # maturity2$slope$value <- 0.3 # population1 <- methods::new(Population) # population2 <- methods::new(Population) # population3 <- methods::new(Population) population_modules[[1]]$maturity_id <- maturity_modules[[1]]$id population_modules[[2]]$maturity_id <- maturity_modules[[1]]$id population_modules[[3]]$maturity_id <- maturity_modules[[2]]$id  # population1$SetMaturity(maturity1$get_id()) # population2$SetMaturity(maturity1$get_id()) # population3$SetMaturity(maturity2$get_id()) information <- list(   populations = list(id = NULL, pointer = \"Population\"),   maturity = list(id = NULL, pointer = \"MaturityBase\") )  # std::map<uint32_t, std::shared_ptr<fims_popdy::MaturityBase<Type> > > maturity_models; # std::map<uint32_t, std::shared_ptr<fims_popdy::Population<Type> > > populations; information$populations[[1]] <- list(id = 1, pointer = population_modules[[1]]) information$populations[[2]] <- list(id = 2, pointer = population_modules[[2]]) information$populations[[3]] <- list(id = 3, pointer = population_modules[[3]])  information$maturity[[1]] <- list(id = 1, pointer = maturity_modules[[1]]) information$maturity[[2]] <- list(id = 2, pointer = maturity_modules[[2]]) ## // (e.g., maturity = maturity_modules[[1]]) # info->maturity_models[maturity->id] = maturity; for (it in 1:length(population_modules)) {   # for (population_iterator it = this->populations.begin();   #      it != this->populations.end(); ++it) {    p <- information$populations[[it]][2]   # std::shared_ptr<fims_popdy::Population<Type> > p = (*it).second;    maturity_uint <- p$pointer$maturity_id   # uint32_t maturity_uint = static_cast<uint32_t>(p->maturity_id);    newit <- which(     sapply(information$maturity, function(x) x$id) == maturity_uint   )   # maturity_models_iterator it = this->maturity_models.find(maturity_uint)    p$pointer$maturity # MaturityBase   p$pointer$maturity <- information$maturity[[newit]][[2]]   p$pointer$maturity # LogisticMaturity1   # p->maturity = (*it).second;    population_modules[[it]][2]$maturity <- p$pointer$maturity }  sapply(population_modules, function(x) x[2]$maturity) #>                  Pop 1 Pop 2 Pop 3 #> id               1     1     2     #> inflection_point 10    10    8     #> slope            0.2   0.2   0.3"},{"path":"https://NOAA-FIMS.github.io/FIMS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kelli F. Johnson. Author, maintainer. Jon K. T. Brodziak. Author. Kathryn L. Doering. Author. Andrea M. Havron. Author. Ronald Klasky. Author. Peter T. Kuriyama. Author. Christopher M. Legault. Author. Bai Li. Author. Timothy J. Miller. Author. Cole C. Monnahan. Author. Megumi C. Oshima. Author. Kyle W. Shertzer. Author. Christine C. Stawitz. Author. Jane Y. Sullivan. Author. Matthew Supernaw. Author. Ian G. Taylor. Author. Nathan R. Vaughan. Author. Kristan Blackhart. Contributor. James N. Ianelli. Contributor.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FIMS Implementation Team. 2022. NOAA-FIMS: NOAA Fisheries Integrated Modeling System. R package version 0.0.0.9000. https://github.com/NOAA-FIMS/FIMS","code":"@Manual{,   title = {{NOAA-FIMS}: The NOAA Fisheries Integrated Modeling System},   author = {FIMS Implementation Team},   year = {2022},   url = {https://github.com/NOAA-FIMS/FIMS}, }"},{"path":"https://NOAA-FIMS.github.io/FIMS/index.html","id":"overview","dir":"","previous_headings":"","what":"Fisheries Integrated Modeling System (FIMS)","title":"Fisheries Integrated Modeling System (FIMS)","text":"NOAA Fisheries Integrated Modeling System (FIMS) software system designed support next-generation fisheries stock assessment, ecosystem, socioeconomic modeling. team experts within NOAA Fisheries designing developing system, advised FIMS Council, includes academic, industry, international partners. software currently operational estimation purposes plan operational management late 2025.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/index.html","id":"installing-fims","dir":"","previous_headings":"","what":"Installing FIMS","title":"Fisheries Integrated Modeling System (FIMS)","text":"precompiled version latest release FIMS available R universe running following code within R: Users can also compile , like TMB package running devtools::install_github(\"NOAA-FIMS/FIMS\"). workflow allows specification particular branch tag using ref argument. Developers interested building FIMS can clone repository, e.g., git clone https://github.com/NOAA-FIMS/FIMS.git build devtools::install(), builds package cloned files installs R library. Installing devtools::load_all() recommended uses shim files things like system.file(), can cause FIMS function expected. example, try optimize model twice, likely get estimates uncertainty second model run. Additionally, devtools::load_all() adds debugger flag -O0 -g leads Windows users seeing Fatal error: write <xxx> bytes section .text FIMS.o: 'file big. Thus, Windows users need run withr::local_options(pkg.build_extra_flags = FALSE) beginning every R session calling devtools::load_all(). want compile FIMS debugger turned need run {withr} function addition manually modifying call PKG_CXXFLAGS Makevars.win file src PKG_CXXFLAGS =  -DTMB_MODEL  -DTMB_EIGEN_DISABLE_WARNINGS -O1 -g. list development tools needed build, test, document FIMS see - -boarding repository NOAA Fisheries Office Science & Technology.","code":"install.packages(\"FIMS\", repos = c(\"https://noaa-fims.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://NOAA-FIMS.github.io/FIMS/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Fisheries Integrated Modeling System (FIMS)","text":"encounter clear üêõ, please file Issue minimal reproducible example GitHub. uncertain actually encountered üêõ, looking information, want talk new ideas please use Discussion Board post thoughts. Users, developers, lurkers, anyone else interested project welcome join discussions, place members assessment open-source software community ask answer questions, share updates, open-ended conversations, follow along decisions affecting FIMS. Also, feel free introduce üëã FIMS Discussion Board.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Fisheries Integrated Modeling System (FIMS)","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/index.html","id":"noaa-disclaimer","dir":"","previous_headings":"","what":"NOAA Disclaimer","title":"Fisheries Integrated Modeling System (FIMS)","text":"repository scientific product official communication National Oceanic Atmospheric Administration, United States Department Commerce. NOAA GitHub project code provided ‚Äò‚Äô basis user assumes responsibility use. claims Department Commerce Department Commerce bureaus stemming use GitHub project governed applicable Federal law. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring Department Commerce. Department Commerce seal logo, seal logo DOC bureau, shall used manner imply endorsement commercial product activity DOC United States Government. Software code created U.S. Government employees subject copyright United States (17 U.S.C. section 105). United States/Department Commerce reserve rights seek obtain copyright protection countries United States Software authored entirety Department Commerce. end, Department Commerce hereby grants Recipient royalty-free, nonexclusive license use, copy, create derivative works Software outside United States.  U.S. Department Commerce | National Oceanographic Atmospheric Administration | NOAA Fisheries","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Class constructors for class FIMSFit and associated child classes ‚Äî FIMSFit","title":"Class constructors for class FIMSFit and associated child classes ‚Äî FIMSFit","text":"Create object class FIMSFit running FIMS model. typically done within fit_fims() can create manually user used bespoke code fit FIMS model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class constructors for class FIMSFit and associated child classes ‚Äî FIMSFit","text":"","code":"FIMSFit(   input,   obj,   opt = list(),   sdreport = list(),   timing = c(time_total = as.difftime(0, units = \"secs\")),   version = utils::packageVersion(\"FIMS\") )"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class constructors for class FIMSFit and associated child classes ‚Äî FIMSFit","text":"input Input list returned initialize_fims(). obj object returned TMB::MakeADFun(). opt object returned optimizer, typically stats::nlminb(), used fit TMB model. sdreport object sdreport class returned TMB::sdreport(). timing vector least length one, entries timediff class least one named \"time_total\". information available fit_fims() added argument internally power user can calculate time took run model subtracting two Sys.time() objects. version version FIMS used optimize model. fit_fims() used optimize model, default use current version package loaded.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class constructors for class FIMSFit and associated child classes ‚Äî FIMSFit","text":"object S4 class FIMSFit returned. object following slots: input: list containing model setup form passed. obj: list returned TMB::MakeADFun() form passed. opt: list containing optimized model form passed. max_gradient: maximum gradient found optimizing model. default NA, means model optimized. report: list containing model report obj[[\"report\"]](). sdreport: object sdreport class containing output TMB::sdreport(obj). estimates: table parameter values uncertainty. timing: length time took run model optimized. version: package version FIMS used fit model least version used create output, always running function .","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Class constructors for FIMSFrame and associated child classes ‚Äî FIMSFrame","title":"Class constructors for FIMSFrame and associated child classes ‚Äî FIMSFrame","text":"constructor functions take single input build object specific needs model type within FIMS. FIMSFrame parent class. Future, associated child classes additional slots needed different types models.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class constructors for FIMSFrame and associated child classes ‚Äî FIMSFrame","text":"","code":"FIMSFrame(data)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class constructors for FIMSFrame and associated child classes ‚Äî FIMSFrame","text":"data data.frame contains necessary columns construct FIMSFrame-class object. Currently, columns type, name, age, length, datestart, dateend, value, unit, uncertainty. See data1 object FIMS, e.g., data(data1, package = \"FIMS\").","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class constructors for FIMSFrame and associated child classes ‚Äî FIMSFrame","text":"object S4 class FIMSFrame class, one child classes, validated returned. objects minimum slot called data store input data frame. Additional slots dependent child class. Use methods::showClass() see available slots.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFrame.html","id":"data","dir":"Reference","previous_headings":"","what":"data","title":"Class constructors for FIMSFrame and associated child classes ‚Äî FIMSFrame","text":"input data sorted expanded returning data slot.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/FIMSFrame.html","id":"sorting","dir":"Reference","previous_headings":"","what":"Sorting","title":"Class constructors for FIMSFrame and associated child classes ‚Äî FIMSFrame","text":"important order rows data correct expected user . Instead, returned data sorted using dplyr::arrange() placing data slot. Data first sorted data type, placing weight--age data next weight--age data landings data next landings data. Thus, age-composition data come first type \"age\" \"\" first alphabet. types follow according order alphabet. Next, within type, data organized fleet. , age-composition information fleet1 come survey1. Next, data within type fleet arranged datestart, e.g., year. end sorting time series data like landings indices. biological data sorted bin. Thus, age-composition information arranged follows: Length composition-data sorted way length bin instead age bin. becomes complicated age--length-conversion data, sorted type, name, datestart, age, length. , full set length, e.g., length 10, length 20, length 30, etc., placed together given age. age, another entire set length information provided next age. year complete given fleet next year begin.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/Rcpp_Math.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets methods for operators under the S4 Generic Group, Ops ‚Äî Ops,Rcpp_Parameter,Rcpp_Parameter-method","title":"Sets methods for operators under the S4 Generic Group, Ops ‚Äî Ops,Rcpp_Parameter,Rcpp_Parameter-method","text":"Ops include Arith (+, -, *, ^, %%, %/%, /); Compare (==, >, <, !=, <=, >=); Logic (&, |). Methods mathematical functions include trigonometry functions, abs, sign, sqrt, ceiling, floor, trunc, cummax, cumprod, cumsum, log, log10, log2, log1p, exp, expm1, gamma, lgamma, digamma, trigamma.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/Rcpp_Math.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets methods for operators under the S4 Generic Group, Ops ‚Äî Ops,Rcpp_Parameter,Rcpp_Parameter-method","text":"","code":"# S4 method for class 'Rcpp_Parameter,Rcpp_Parameter' Ops(e1, e2)  # S4 method for class 'Rcpp_Parameter,numeric' Ops(e1, e2)  # S4 method for class 'numeric,Rcpp_Parameter' Ops(e1, e2)  # S4 method for class 'Rcpp_ParameterVector,Rcpp_ParameterVector' Ops(e1, e2)  # S4 method for class 'Rcpp_ParameterVector,numeric' Ops(e1, e2)  # S4 method for class 'numeric,Rcpp_ParameterVector' Ops(e1, e2)  # S4 method for class 'Rcpp_ParameterVector' Math(x)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/Rcpp_Math.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets methods for operators under the S4 Generic Group, Ops ‚Äî Ops,Rcpp_Parameter,Rcpp_Parameter-method","text":"e1, e2 Rcpp_Parameter Rcpp_ParameterVector class object numeric vector value. x Rcpp_ParameterVector class object.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/Rcpp_Math.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets methods for operators under the S4 Generic Group, Ops ‚Äî Ops,Rcpp_Parameter,Rcpp_Parameter-method","text":"numeric logical value(s) depending generic length input values. vector numeric values.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/Rcpp_ParameterVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for Rcpp_ParameterVector ‚Äî [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","title":"Setter for Rcpp_ParameterVector ‚Äî [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","text":"R, indexing starts one. , C++ indexing starts zero. functions translation can think R terms. R, indexing starts one. , C++ indexing starts zero. function translation can think R terms. Methods summary functions include max, min, range, prod, sum, , .","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/Rcpp_ParameterVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for Rcpp_ParameterVector ‚Äî [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","text":"","code":"# S4 method for class 'Rcpp_ParameterVector,ANY,ANY,ANY' x[i, j] <- value  # S4 method for class 'Rcpp_ParameterVector,numeric,ANY,ANY' x[i]  # S4 method for class 'Rcpp_ParameterVector' length(x)  # S4 method for class 'Rcpp_ParameterVector' sum(x)  # S4 method for class 'Rcpp_ParameterVector' dim(x)  # S4 method for class 'Rcpp_ParameterVector' Summary(x)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/Rcpp_ParameterVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for Rcpp_ParameterVector ‚Äî [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","text":"x Rcpp_ParameterVector class object. integer specifying location R speak, indexing starts one, vector wish get information . j used Rcpp_ParameterVector vector. value value want set indexed location .","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/Rcpp_ParameterVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter for Rcpp_ParameterVector ‚Äî [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","text":"[<-, index object x set value. [, index object x returned. length(), length object x returned integer. sum(), sum object x returned numeric value. dim(), dimensions object x returned single integer one dimension return vector. Summary returns single two numeric logical values.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_configurations.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a default FIMS configuration tibble ‚Äî create_default_configurations","title":"Create a default FIMS configuration tibble ‚Äî create_default_configurations","text":"function generates default configuration tibble Fisheries Integrated Modeling System (FIMS) model based data input. automatically creates configuration entries data modules (e.g., landings, index, compositions) , depending model family, standard population dynamics modules (recruitment, growth, maturity) selectivity modules fleets.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_configurations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a default FIMS configuration tibble ‚Äî create_default_configurations","text":"","code":"create_default_configurations(data, model_family = c(\"catch_at_age\"))"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_configurations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a default FIMS configuration tibble ‚Äî create_default_configurations","text":"data S4 object class FIMSFrame. FIMS input data. model_family string specifying model family. Defaults \"catch_at_age\".","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_configurations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a default FIMS configuration tibble ‚Äî create_default_configurations","text":"tibble default model configurations. tibble nested structure following top-level columns. model_family: specified model family (e.g., \"catch_at_age\"). module_name: name FIMS module (e.g., \"Data\", \"Selectivity\", \"Recruitment\", \"Growth\", \"Maturity\"). fleet_name: name fleet module applies . NA non-fleet-specific modules like \"Recruitment\". data: list-column containing tibble detailed configurations. Unnesting column reveals: module_type: specific type module (e.g., \"Logistic\" \"Selectivity\" module). distribution_link: component distribution module links . distribution_type: type distribution (e.g., \"Data\", \"process\"). distribution: name distribution (e.g., \"Dlnorm\", Dmultinom).","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_configurations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a default FIMS configuration tibble ‚Äî create_default_configurations","text":"function inspects data find unique combinations fleet names data types. maps appropriate FIMS module names joins predefined template default settings. model_family \"catch_at_age\", also adds default configurations : Selectivity: logistic selectivity module unique fleet. Recruitment: Beverton‚ÄìHolt recruitment module. Growth: empirical weight--age (EWAA) growth module. Maturity: logistic maturity module. final output nested tibble, serves starting point building complete FIMS model configuration.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_configurations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a default FIMS configuration tibble ‚Äî create_default_configurations","text":"","code":"# Load the example dataset and create a FIMS data frame data(\"data1\") fims_frame <- FIMSFrame(data1)  # Create the default model configuration tibble default_configurations <- create_default_configurations(data = fims_frame)  # Unnest the data column to see detailed configurations default_configurations_unnest <- default_configurations |>   tidyr::unnest(cols = data) |>   print() #> # A tibble: 11 √ó 7 #>    model_family module_name fleet_name module_type  distribution_link #>    <chr>        <chr>       <chr>      <chr>        <chr>             #>  1 catch_at_age Data        fleet1     AgeComp      AgeComp           #>  2 catch_at_age Data        fleet1     Landings     Landings          #>  3 catch_at_age Data        fleet1     LengthComp   LengthComp        #>  4 catch_at_age Selectivity fleet1     Logistic     NA                #>  5 catch_at_age Data        survey1    AgeComp      AgeComp           #>  6 catch_at_age Data        survey1    Index        Index             #>  7 catch_at_age Data        survey1    LengthComp   LengthComp        #>  8 catch_at_age Selectivity survey1    Logistic     NA                #>  9 catch_at_age Growth      NA         EWAA         NA                #> 10 catch_at_age Maturity    NA         Logistic     NA                #> 11 catch_at_age Recruitment NA         BevertonHolt log_devs          #> # ‚Ñπ 2 more variables: distribution_type <chr>, distribution <chr>  # Model fleet1 with double logistic selectivity configurations_double_logistic <- default_configurations_unnest |>   dplyr::rows_update(     tibble::tibble(       module_name = \"Selectivity\",       fleet_name = \"fleet1\",       module_type = \"DoubleLogistic\"     ),     by = c(\"module_name\", \"fleet_name\")   ) |>   print() #> # A tibble: 11 √ó 7 #>    model_family module_name fleet_name module_type    distribution_link #>    <chr>        <chr>       <chr>      <chr>          <chr>             #>  1 catch_at_age Data        fleet1     AgeComp        AgeComp           #>  2 catch_at_age Data        fleet1     Landings       Landings          #>  3 catch_at_age Data        fleet1     LengthComp     LengthComp        #>  4 catch_at_age Selectivity fleet1     DoubleLogistic NA                #>  5 catch_at_age Data        survey1    AgeComp        AgeComp           #>  6 catch_at_age Data        survey1    Index          Index             #>  7 catch_at_age Data        survey1    LengthComp     LengthComp        #>  8 catch_at_age Selectivity survey1    Logistic       NA                #>  9 catch_at_age Growth      NA         EWAA           NA                #> 10 catch_at_age Maturity    NA         Logistic       NA                #> 11 catch_at_age Recruitment NA         BevertonHolt   log_devs          #> # ‚Ñπ 2 more variables: distribution_type <chr>, distribution <chr>"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Create default parameters for a FIMS model ‚Äî create_default_parameters","title":"Create default parameters for a FIMS model ‚Äî create_default_parameters","text":"function generates Fisheries Integrated Modeling System (FIMS) model configuration detailed parameter specifications. function takes high-level configuration tibble generates corresponding parameters default initial values estimation settings required build run model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create default parameters for a FIMS model ‚Äî create_default_parameters","text":"","code":"create_default_parameters(configurations, data)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create default parameters for a FIMS model ‚Äî create_default_parameters","text":"configurations tibble model configurations. Typically created create_default_configurations(). Users can modify tibble customize model structure generating default parameters. data S4 object. FIMS input data.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create default parameters for a FIMS model ‚Äî create_default_parameters","text":"tibble default model parameters. tibble nested structure following top-level columns. model_family: specified model family (e.g., \"catch_at_age\"). module_name: name FIMS module (e.g., \"Data\", \"Selectivity\", \"Recruitment\", \"Growth\", \"Maturity\"). fleet_name: name fleet module applies . NA non-fleet-specific modules like \"Recruitment\". data: list-column containing tibble detailed parameters. Unnesting column reveals: module_type: specific type module (e.g., \"Logistic\" \"Selectivity\" module). label: name parameter (e.g., \"inflection_point\"). distribution_link: component distribution module links . age: age parameter applies . length: length bin parameter applies . time: time step (.e., year) parameter applies . value: initial value parameter. estimation_type: type estimation (e.g., \"constant\", \"fixed_effects\", \"random_effects\"). distribution_type: type distribution (e.g., \"Data\", \"process\"). distribution: name distribution (e.g., \"Dlnorm\", Dmultinom).","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create default parameters for a FIMS model ‚Äî create_default_parameters","text":"function processes input configurations tibble, defines modules different model components (e.g., \"Selectivity\", \"Recruitment\"). module specified, calls internal helper functions create default set parameters. example, fleet's selectivity configured \"Logistic\", generates initial values \"inflection_point\" \"slope\".","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/create_default_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create default parameters for a FIMS model ‚Äî create_default_parameters","text":"","code":"if (FALSE) { # \\dontrun{ # Load the example dataset and create a FIMS data frame data(\"data1\") fims_frame <- FIMSFrame(data1)  # Create default configurations default_configurations <- create_default_configurations(fims_frame)  # Create default parameters default_parameters <- create_default_parameters(   configurations = default_configurations,   data = fims_frame ) |>   tidyr::unnest(cols = data)  # Update selectivity parameters for survey1 updated_parameters <- default_parameters |>   dplyr::rows_update(     tibble::tibble(       fleet_name = \"survey1\",       label = c(\"inflection_point\", \"slope\"),       value = c(1.5, 2)     ),     by = c(\"fleet_name\", \"label\")   )  # Do the same as above except, model fleet1 with double logistic selectivity # To see required parameters for double logistic selectivity, run # show(DoubleLogisticSelectivity) parameters_with_double_logistic <- default_configurations |>   tidyr::unnest(cols = data) |>   dplyr::rows_update(     tibble::tibble(       module_name = \"Selectivity\",       fleet_name = \"fleet1\",       module_type = \"DoubleLogistic\"     ),     by = c(\"module_name\", \"fleet_name\")   ) |>   create_default_parameters(     data = fims_frame   ) } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/data1.html","id":null,"dir":"Reference","previous_headings":"","what":"FIMS input data frame ‚Äî data1","title":"FIMS input data frame ‚Äî data1","text":"dataset containing information necessary run age-structured stock assessment model FIMS. data generated using ASSAMC package written model comparison project.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/data1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIMS input data frame ‚Äî data1","text":"","code":"data1"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/data1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FIMS input data frame ‚Äî data1","text":"data frame 19080 observations 9 variables: type type data row contains. Allowed types include age, length, index, landings, age--length-conversion, weight--age data. name character string providing name information source data collected , e.g., \"Trawl fishery\". age integer age. Entry can NA information pertains multiple ages, e.g., total landings rather landings age-4 fish. length numeric length. Entry can NA information pertain length. datestart,dateend Start end dates data collection period. Format dates using yyyy-mm-dd, can accommodate fake years 0001-01-01. value measurement interest. unit character string specifying units value. Allowed units data type follows. mt used index, landings, weight--age data. number proportion viable units composition data, former preferred unit measurement. uncertainty real value providing measurement uncertainty value. landings indices abundance standard deviation logged observations using lognormal distribution fit data. composition data input sample size.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/data1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FIMS input data frame ‚Äî data1","text":"www.github.com/NOAA-FIMS/Age_Structured_Stock_Assessment_Model_Comparison","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/fit_fims.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a FIMS model (BETA) ‚Äî fit_fims","title":"Fit a FIMS model (BETA) ‚Äî fit_fims","text":"Fit FIMS model (BETA)","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/fit_fims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a FIMS model (BETA) ‚Äî fit_fims","text":"","code":"fit_fims(   input,   get_sd = TRUE,   save_sd = TRUE,   number_of_loops = 3,   optimize = TRUE,   number_of_newton_steps = 0,   control = list(eval.max = 10000, iter.max = 10000, trace = 0),   filename = NULL )"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/fit_fims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a FIMS model (BETA) ‚Äî fit_fims","text":"input Input list returned initialize_fims(). get_sd boolean specifying TMB::sdreport() calculated? save_sd logical, default TRUE, indicating whether sdreport returned output. FALSE, slot report empty. number_of_loops positive integer specifying number iterations optimizer performed improve gradient. default three, leading four total optimization steps. optimize Optimize (TRUE, default) (FALSE) build return list containing obj report slot. number_of_newton_steps number Newton steps using inverse Hessian optimization. yet implemented. control list optimizer settings passed stats::nlminb(). default list length three eval.max = 1000, iter.max = 10000, trace = 0. filename Character string giving file name save fitted object RDS object. Defaults 'fit.RDS', value NULL indicates save . specified, must end .RDS. file written folder given input[[\"path\"]]. yet implemented.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/fit_fims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a FIMS model (BETA) ‚Äî fit_fims","text":"object class FIMSFit returned, structure regardless optimize = TRUE . Uncertainty information included estimates slot get_sd = TRUE.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/fit_fims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a FIMS model (BETA) ‚Äî fit_fims","text":"function beta version still subject change without warning.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/get_FIMSFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a slot in a FIMSFit object ‚Äî get_FIMSFit","title":"Get a slot in a FIMSFit object ‚Äî get_FIMSFit","text":"accessor function slot S4 class FIMSFit, function named get_*() star can replaced slot name, e.g., get_input(). accessor functions preferred way access objects stored available slots.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/get_FIMSFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a slot in a FIMSFit object ‚Äî get_FIMSFit","text":"","code":"get_input(x)  # S4 method for class 'FIMSFit' get_input(x)  get_report(x)  # S4 method for class 'FIMSFit' get_report(x)  get_obj(x)  # S4 method for class 'FIMSFit' get_obj(x)  get_opt(x)  # S4 method for class 'FIMSFit' get_opt(x)  get_max_gradient(x)  # S4 method for class 'FIMSFit' get_max_gradient(x)  get_sdreport(x)  # S4 method for class 'FIMSFit' get_sdreport(x)  get_estimates(x)  # S4 method for class 'FIMSFit' get_estimates(x)  get_fits(x)  # S4 method for class 'FIMSFit' get_fits(x)  get_number_of_parameters(x)  # S4 method for class 'FIMSFit' get_number_of_parameters(x)  get_timing(x)  # S4 method for class 'FIMSFit' get_timing(x)  get_version(x)  # S4 method for class 'FIMSFit' get_version(x)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/get_FIMSFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a slot in a FIMSFit object ‚Äî get_FIMSFit","text":"x Output returned fit_fims().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/get_FIMSFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a slot in a FIMSFit object ‚Äî get_FIMSFit","text":"get_input() returns list used fit FIMS model, returned object create_default_parameters(). get_report() returns TMB report, anything flagged reportable C++ code returned. get_obj() returns output TMB::MakeADFun(). get_opt() returns output nlminb(), minimizer used fit_fims(). get_max_gradient() returns maximum gradient found optimizing model. get_sdreport() returns list TMB::sdreport(). get_estimates() returns tibble parameter values uncertainties fitted model. get_fits() returns tibble input data corresponding expected values, likelihoods, additional metadata fitted model. tibble includes following variables: module_name: Character string describes name module, e.g., \"Data\". module_id: Integer provides identifier linking outputs. label: Character string describes type data. data_id: yet implemented/NA: Integer provide unique identifier data. fleet_name: yet implemented/NA: Character string provide fleet name corresponding name provided via FIMSFrame. unit: yet implemented/NA: Character string describe appropriate units data inputs expected values. uncertainty: yet implemented/NA: Character string describe uncertainty specified data input value. age: yet implemented/NA: Integer provide age affiliated data input, appropriate. length: yet implemented/NA: Integer provide length affiliated data input, appropriate. datestart: yet implemented/NA: Character string provide start date data input, corresponding value provided input data. dateend: yet implemented/NA: Character string provide end date data input, corresponding value provided input data. year: yet implemented/NA: Integer provide model year data input. init: Numeric provides initial value data input. expected: Numeric provides expected value data input. *NOTE: units provided init expected values need standardized. log_like: Numeric provides log-likelihood expected value. distribution: Character string indicates distribution used log-likelihood estimation. re_estimated: Logical indicates whether random effects estimated model fitting. Log-likelihood values directly compared models without estimation random effects. log_like_cv: yet implemented/NA: Numeric indicate corresponding uncertainty log-likelihood value. weight: Numeric indicates data weighting applied data value; manually fixed 1. *NOTE: need made responsive user-specified user-estimated data weighting data weighting added FIMS feature. get_number_of_parameters() returns vector integers specifying number fixed-effect parameters number random-effect parameters model. get_timing() returns amount time took run model seconds difftime object. get_version() returns package_version FIMS used fit model.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/get_FIMSFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a slot in a FIMSFrame object ‚Äî get_FIMSFrame","title":"Get a slot in a FIMSFrame object ‚Äî get_FIMSFrame","text":"accessor function slot S4 class FIMSFrame, function named get_*() star can replaced slot name, e.g., get_data(). accessor functions preferred way access objects stored available slots.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/get_FIMSFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a slot in a FIMSFrame object ‚Äî get_FIMSFrame","text":"","code":"get_data(x)  # S4 method for class 'FIMSFrame' get_data(x)  # S4 method for class 'data.frame' get_data(x)  get_fleets(x)  # S4 method for class 'FIMSFrame' get_fleets(x)  # S4 method for class 'data.frame' get_fleets(x)  get_n_fleets(x)  # S4 method for class 'FIMSFrame' get_n_fleets(x)  # S4 method for class 'data.frame' get_n_fleets(x)  get_n_years(x)  # S4 method for class 'FIMSFrame' get_n_years(x)  # S4 method for class 'data.frame' get_n_years(x)  get_start_year(x)  # S4 method for class 'FIMSFrame' get_start_year(x)  # S4 method for class 'data.frame' get_start_year(x)  get_end_year(x)  # S4 method for class 'FIMSFrame' get_end_year(x)  # S4 method for class 'data.frame' get_end_year(x)  get_ages(x)  # S4 method for class 'FIMSFrame' get_ages(x)  # S4 method for class 'data.frame' get_ages(x)  get_n_ages(x)  # S4 method for class 'FIMSFrame' get_n_ages(x)  # S4 method for class 'data.frame' get_n_ages(x)  get_lengths(x)  # S4 method for class 'FIMSFrame' get_lengths(x)  # S4 method for class 'data.frame' get_lengths(x)  get_n_lengths(x)  # S4 method for class 'FIMSFrame' get_n_lengths(x)  # S4 method for class 'data.frame' get_n_lengths(x)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/get_FIMSFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a slot in a FIMSFrame object ‚Äî get_FIMSFrame","text":"x object returned FIMSFrame().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/get_FIMSFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a slot in a FIMSFrame object ‚Äî get_FIMSFrame","text":"get_data() returns data frame class tbl_df containing data FIMS model long format. tibble potentially following columns depending fits ages lengths just one : type, name, age, length, datestart, dateend, value, unit, uncertainty. get_fleets() returns vector strings containing fleet names. get_n_fleets() returns integer specifying number fleets model, fleets inclusive fishing fleets survey vessels. get_n_years() returns integer specifying number years model. get_start_year() returns integer specifying start year model. get_end_year() returns integer specifying end year model. get_ages() returns vector age bins used model. get_n_ages() returns integer specifying number age bins used model. get_lengths() returns vector length bins used model. get_n_lengths() returns integer specifying number length bins used model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_data_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a new distribution for a data type or a process ‚Äî initialize_data_distribution","title":"Set up a new distribution for a data type or a process ‚Äî initialize_data_distribution","text":"Use methods::new() set distribution within existing module necessary linkages two. example, fleet module need distributional assumption parts data associated , requires use initialize_data_distribution(), recruitment module, like Beverton‚ÄìHolt stock‚Äìrecruit relationship, need distribution associated recruitment deviations, requires initialize_process_distribution().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_data_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a new distribution for a data type or a process ‚Äî initialize_data_distribution","text":"","code":"initialize_data_distribution(   module,   family = NULL,   sd = tibble::tibble(value = 1, estimation_type = \"constant\"),   data_type = c(\"landings\", \"index\", \"agecomp\", \"lengthcomp\") )  initialize_process_distribution(   module,   par,   family = NULL,   sd = tibble::tibble(value = 1, estimation_type = \"constant\"),   is_random_effect = FALSE )  initialize_process_structure(module, par)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_data_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up a new distribution for a data type or a process ‚Äî initialize_data_distribution","text":"module identifier C++ fleet module linked data interest. family description error distribution link function used model. argument takes family class, e.g., stats::gaussian(link = \"identity\"). sd list length two. first entry named \"value\" stores initial values (scalar vector) relevant standard deviations. default value = 1. second entry named \"estimation_type\" stores vector booleans (default = \"constant\") string indicating whether standard deviation estimated fixed effect held constant. \"value\" vector \"estimation_type\" scalar, single value specified \"estimation_type\" value repeated match length value. Otherwise, dimensions two must match. data_type string specifying type data distribution fit . Allowable types include c, landings, index, agecomp, lengthcomp default c. par string specifying parameter name distribution applies . Parameters must members specified module. Use methods::show(module) obtain names parameters within module. is_random_effect boolean indicating whether process estimated random effect.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_data_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up a new distribution for a data type or a process ‚Äî initialize_data_distribution","text":"reference class. returned. Use methods::show() view various Rcpp class fields, methods, documentation.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_data_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up a new distribution for a data type or a process ‚Äî initialize_data_distribution","text":"","code":"if (FALSE) { # \\dontrun{ # Set up a new data distribution n_years <- 30 # Create a new fleet module fleet <- methods::new(Fleet) # Create a distribution for the fleet module fleet_distribution <- initialize_data_distribution(   module = fishing_fleet,   family = lognormal(link = \"log\"),   sd = list(     value = rep(sqrt(log(0.01^2 + 1)), n_years),     estimation_type = rep(\"constant\", n_years) # Could also be a single \"constant\"   ),   data_type = \"index\" )  # Set up a new process distribution # Create a new recruitment module recruitment <- methods::new(BevertonHoltRecruitment) # view parameter names of the recruitment module methods::show(BevertonHoltRecruitment) # Create a distribution for the recruitment module recruitment_distribution <- initialize_process_distribution(   module = recruitment,   par = \"log_devs\",   family = gaussian(),   sd = list(value = 0.4, estimation_type = \"constant\"),   is_random_effect = FALSE ) } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_fims.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize FIMS modules ‚Äî initialize_fims","title":"Initialize FIMS modules ‚Äî initialize_fims","text":"Initializes multiple modules within Fisheries Integrated Modeling System (FIMS), including fleet, recruitment, growth, maturity, population modules. function iterates provided fleets, setting necessary sub-modules selectivity, index, age composition. also sets distribution models fishery index age-composition data.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_fims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize FIMS modules ‚Äî initialize_fims","text":"","code":"initialize_fims(parameters, data)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_fims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize FIMS modules ‚Äî initialize_fims","text":"parameters tibble. Contains parameters modules required initialization. data S4 object. FIMS input data.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/initialize_fims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize FIMS modules ‚Äî initialize_fims","text":"list containing parameters initialized FIMS modules, ready use TMB modeling.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/is.FIMSFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class FIMSFit ‚Äî is.FIMSFit","title":"Check if an object is of class FIMSFit ‚Äî is.FIMSFit","text":"Check object class FIMSFit","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/is.FIMSFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class FIMSFit ‚Äî is.FIMSFit","text":"","code":"is.FIMSFit(x)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/is.FIMSFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class FIMSFit ‚Äî is.FIMSFit","text":"x Returned list fit_fims().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/is_fims_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Should FIMS be verbose? ‚Äî is_fims_verbose","title":"Should FIMS be verbose? ‚Äî is_fims_verbose","text":"Verbosity set globally FIMS using options(rlib_message_verbosity = \"quiet\") stop printing messages cli::cli_inform(). Using global option allows verbose argument every function. cli::cli_abort() messages printed console matter global option set .","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/is_fims_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Should FIMS be verbose? ‚Äî is_fims_verbose","text":"","code":"is_fims_verbose()"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/is_fims_verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Should FIMS be verbose? ‚Äî is_fims_verbose","text":"logical returned TRUE ensures messages cli::cli_inform() printed console.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/is_fims_verbose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Should FIMS be verbose? ‚Äî is_fims_verbose","text":"","code":"# function is not exported if (FALSE) { # \\dontrun{ FIMS:::is_fims_verbose() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/lognormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Distributions not available in the stats package ‚Äî lognormal","title":"Distributions not available in the stats package ‚Äî lognormal","text":"Family objects provide convenient way specify details models used functions stats::glm(). functions within package available within stats package designed similar manner.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/lognormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distributions not available in the stats package ‚Äî lognormal","text":"","code":"lognormal(link = \"log\")  multinomial(link = \"logit\")"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/lognormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distributions not available in the stats package ‚Äî lognormal","text":"link string specifying model link function. example, \"identity\" \"log\" appropriate names stats::gaussian() distribution. \"log\" \"logit\" defaults lognormal multinomial, respectively.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/lognormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distributions not available in the stats package ‚Äî lognormal","text":"object class family (concise print method). particular family truncated length compared distributions stats::family(). family character: family name. link character: link name.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/lognormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distributions not available in the stats package ‚Äî lognormal","text":"","code":"a_family <- multinomial() a_family[[\"family\"]] #> [1] \"multinomial\" a_family[[\"link\"]] #> [1] \"logit\""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/m_.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object ‚Äî m_","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object ‚Äî m_","text":"accessor function data type needed run FIMS model. FIMS model accepts vectors data thus m_*() functions, star can replaced data type separated underscores, e.g., weight_at_age. accessor functions preferred way pass data FIMS module data appropriate indexing.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/m_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object ‚Äî m_","text":"","code":"m_landings(x, fleet_name)  # S4 method for class 'FIMSFrame' m_landings(x, fleet_name)  # S4 method for class 'data.frame' m_landings(x, fleet_name)  m_index(x, fleet_name)  # S4 method for class 'FIMSFrame' m_index(x, fleet_name)  # S4 method for class 'data.frame' m_index(x, fleet_name)  m_agecomp(x, fleet_name)  # S4 method for class 'FIMSFrame' m_agecomp(x, fleet_name)  # S4 method for class 'data.frame' m_agecomp(x, fleet_name)  m_lengthcomp(x, fleet_name)  # S4 method for class 'FIMSFrame' m_lengthcomp(x, fleet_name)  # S4 method for class 'data.frame' m_lengthcomp(x, fleet_name)  m_weight_at_age(x)  # S4 method for class 'FIMSFrame' m_weight_at_age(x)  # S4 method for class 'data.frame' m_weight_at_age(x)  m_age_to_length_conversion(x, fleet_name)  # S4 method for class 'FIMSFrame' m_age_to_length_conversion(x, fleet_name)  # S4 method for class 'data.frame' m_age_to_length_conversion(x, fleet_name)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/m_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object ‚Äî m_","text":"x object returned FIMSFrame(). fleet_name string, vector strings, specifying name fleet(s) interest want landings data . strings must exactly match strings column \"name\" get_data(x).","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/m_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object ‚Äî m_","text":"m_*() functions return vectors data. Currently, order data order data frame arranging done FIMSFrame() function just extracts appropriate column.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/m_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object ‚Äî m_","text":"Age--length-conversion data, .e., proportion age \"\" length \"l\", used convert lengths (input data) ages (modeled) way fit length data without estimating growth.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/remove_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove test data ‚Äî remove_test_data","title":"Remove test data ‚Äî remove_test_data","text":"Intended developers remove test data run tests fresh. Developers run function testing changes affect FIMS input output.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/remove_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove test data ‚Äî remove_test_data","text":"","code":"remove_test_data()"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/remove_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove test data ‚Äî remove_test_data","text":"","code":"if (FALSE) { # \\dontrun{ remove_test_data() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_derived_quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape JSON derived quantities ‚Äî reshape_json_derived_quantities","title":"Reshape JSON derived quantities ‚Äî reshape_json_derived_quantities","text":"function processes finalized FIMS JSON output reshapes derived quantities structured tibble easier analysis manipulation.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_derived_quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape JSON derived quantities ‚Äî reshape_json_derived_quantities","text":"","code":"reshape_json_derived_quantities(finalized_fims)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_derived_quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape JSON derived quantities ‚Äî reshape_json_derived_quantities","text":"finalized_fims JSON object containing finalized FIMS output.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_derived_quantities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape JSON derived quantities ‚Äî reshape_json_derived_quantities","text":"tibble containing reshaped parameter estimates.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape JSON estimates ‚Äî reshape_json_estimates","title":"Reshape JSON estimates ‚Äî reshape_json_estimates","text":"function processes finalized FIMS JSON output reshapes parameter estimates structured tibble easier analysis manipulation.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape JSON estimates ‚Äî reshape_json_estimates","text":"","code":"reshape_json_estimates(finalized_fims, opt = list())"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape JSON estimates ‚Äî reshape_json_estimates","text":"finalized_fims JSON object containing finalized FIMS output. opt object returned optimizer, typically stats::nlminb(), used fit TMB model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape JSON estimates ‚Äî reshape_json_estimates","text":"tibble containing reshaped parameter estimates.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape JSON 'fits' components ‚Äî reshape_json_fits","title":"Reshape JSON 'fits' components ‚Äî reshape_json_fits","text":"function processes finalized FIMS JSON output extracts/formats log_like, distribution, init, expected density_components, observed_values, expected_values structured tibble easier analysis manipulation. Values subsequently used generate 'fits' tibble get_fits().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape JSON 'fits' components ‚Äî reshape_json_fits","text":"","code":"reshape_json_fits(finalized_fims)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape JSON 'fits' components ‚Äî reshape_json_fits","text":"finalized_fims JSON object containing finalized FIMS output.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_fits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape JSON 'fits' components ‚Äî reshape_json_fits","text":"tibble containing reshaped data fitting values.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape JSON 'values' components ‚Äî reshape_json_values","title":"Reshape JSON 'values' components ‚Äî reshape_json_values","text":"function processes model input FIMS JSON output ('values') reshapes initial values data inputs structured tibble.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape JSON 'values' components ‚Äî reshape_json_values","text":"","code":"reshape_json_values(finalized_fims)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape JSON 'values' components ‚Äî reshape_json_values","text":"finalized_fims JSON object containing finalized FIMS output.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_json_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape JSON 'values' components ‚Äî reshape_json_values","text":"tibble containing reshaped initial data values.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_tmb_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape TMB estimates ‚Äî reshape_tmb_estimates","title":"Reshape TMB estimates ‚Äî reshape_tmb_estimates","text":"function processes TMB std reshapes structured tibble easier analysis manipulation.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_tmb_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape TMB estimates ‚Äî reshape_tmb_estimates","text":"","code":"reshape_tmb_estimates(obj, sdreport = NULL, opt = NULL, parameter_names)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_tmb_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape TMB estimates ‚Äî reshape_tmb_estimates","text":"obj object returned TMB::MakeADFun(). sdreport object sdreport class returned TMB::sdreport(). opt object returned optimizer, typically stats::nlminb(), used fit TMB model. parameter_names character vector parameter names. used identify parameters std object.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/reshape_tmb_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape TMB estimates ‚Äî reshape_tmb_estimates","text":"tibble containing reshaped estimates (.e., parameters derived quantities).","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_gtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the google test suite ‚Äî run_gtest","title":"Run the google test suite ‚Äî run_gtest","text":"Intended developers run google test suite R.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_gtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the google test suite ‚Äî run_gtest","text":"","code":"run_gtest(...)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_gtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the google test suite ‚Äî run_gtest","text":"... Additional arguments ctest --test-dir build \"--rerun-failed --output--failure\" --parallel 16 want run multiple cores.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_gtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run the google test suite ‚Äî run_gtest","text":"output running tests look something like following:   test fails, output look something like following:","code":"Internal ctest changing into directory: C:/github/NOAA-FIMS/FIMS/build Test project C:/github_repos/NOAA-FIMS_org/FIMS/build     Start 1: dlognorm.use_double_inputs 1/5 Test #1: dlognorm.use_double_inputs .......   Passed    0.04 sec     Start 2: dlognorm.use_int_inputs 2/5 Test #2: dlognorm.use_int_inputs ..........   Passed    0.04 sec     Start 3: modelTest.eta 3/5 Test #3: modelTest.eta ....................   Passed    0.04 sec     Start 4: modelTest.nll 4/5 Test #4: modelTest.nll ....................   Passed    0.04 sec     Start 5: modelTest.evaluate 5/5 Test #5: modelTest.evaluate ...............   Passed    0.04 sec  100% tests passed, 0 tests failed out of 5 Internal ctest changing into directory: C:/github/NOAA-FIMS/FIMS/build Test project C:/github/NOAA-FIMS/FIMS/build     Start 1: dlognorm.use_double_inputs 1/7 Test #1: dlognorm.use_double_inputs .......   Passed    0.04 sec     Start 2: dlognorm.use_int_inputs 2/7 Test #2: dlognorm.use_int_inputs ..........   Passed    0.04 sec     Start 3: modelTest.eta 3/7 Test #3: modelTest.eta ....................   Passed    0.04 sec     Start 4: modelTest.nll 4/7 Test #4: modelTest.nll ....................   Passed    0.04 sec     Start 5: modelTest.evaluate 5/7 Test #5: modelTest.evaluate ...............   Passed    0.04 sec     Start 6: dlognormTest.DoubleInput 6/7 Test #6: dlognormTest.DoubleInput .........   Passed    0.04 sec     Start 7: dlognormTest.IntInput 7/7 Test #7: dlognormTest.IntInput ............***Failed    0.04 sec  86% tests passed, 1 tests failed out of 7  Total Test time (real) =   0.28 sec  The following tests FAILED:           7 - dlognormTest.IntInput (Failed) Errors while running CTest Output from these tests are in: C:/github/NOAA-FIMS/FIMS/build/Testing/Temporary/LastTest.log Use \"--rerun-failed --output-on-failure\" to re-run the failed cases verbosely."},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_r_integration_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Run R integration tests ‚Äî run_r_integration_tests","title":"Run R integration tests ‚Äî run_r_integration_tests","text":"Intended developers run R integration tests.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_r_integration_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run R integration tests ‚Äî run_r_integration_tests","text":"","code":"run_r_integration_tests()"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_r_integration_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run R integration tests ‚Äî run_r_integration_tests","text":"","code":"if (FALSE) { # \\dontrun{ run_r_integration_tests() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_r_unit_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Run R unit tests ‚Äî run_r_unit_tests","title":"Run R unit tests ‚Äî run_r_unit_tests","text":"Intended developers run R unit tests.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_r_unit_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run R unit tests ‚Äî run_r_unit_tests","text":"","code":"run_r_unit_tests()"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/run_r_unit_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run R unit tests ‚Äî run_r_unit_tests","text":"","code":"if (FALSE) { # \\dontrun{ run_r_unit_tests() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/setup_and_run_gtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup and run the google test suite ‚Äî setup_and_run_gtest","title":"Setup and run the google test suite ‚Äî setup_and_run_gtest","text":"Intended developers set local environment run google test suite R.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/setup_and_run_gtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup and run the google test suite ‚Äî setup_and_run_gtest","text":"","code":"setup_and_run_gtest(...)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/setup_and_run_gtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup and run the google test suite ‚Äî setup_and_run_gtest","text":"... Additional arguments ctest --test-dir build \"--rerun-failed --output--failure\" --parallel 16 want run multiple cores.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/setup_and_run_gtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup and run the google test suite ‚Äî setup_and_run_gtest","text":"","code":"if (FALSE) { # \\dontrun{ setup_and_run_gtest(\"--rerun-failed --output-on-failure\") } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/setup_gtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up your local environment to run the google tests locally ‚Äî setup_gtest","title":"Set up your local environment to run the google tests locally ‚Äî setup_gtest","text":"Intended developers set local environment prior running integration tests.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/setup_gtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up your local environment to run the google tests locally ‚Äî setup_gtest","text":"","code":"setup_gtest()"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/setup_gtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up your local environment to run the google tests locally ‚Äî setup_gtest","text":"","code":"if (FALSE) { # \\dontrun{ setup_gtest() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_gtest_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt ‚Äî use_gtest_template","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt ‚Äî use_gtest_template","text":"helper function generates GoogleTest (gtest) C++ template file given function appends lines CMakeLists.txt register test.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_gtest_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt ‚Äî use_gtest_template","text":"","code":"use_gtest_template(name = \"FileName_ClassName_FunctionName\")"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_gtest_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt ‚Äî use_gtest_template","text":"name string representing combined name C++ test file CMake executable target. must follow format FileName_ClassName_FunctionName, FileName C++ source file name (e.g., \"Logistic\") ClassName C++ class name (e.g., \"LogisticSelectivity\") FunctionName C++ function name (e.g., \"Evaluate\") use underscores separate component. example: Logistic_LogisticSelectivity_Evaluate. function member class, use placeholder ClassName. example: FIMSMath_ClassName_Logistic. default FileName_ClassName_FunctionName.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_gtest_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt ‚Äî use_gtest_template","text":"successful, function invisibly returns TRUE allow chaining commands. function unsuccessful, error message returned. Three messages also returned usethis package, used function. first states FIMS project computer. second states file path newly created file. file automatically opened. third states test registered tests/gtest/CMakeLists.txt.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_gtest_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt ‚Äî use_gtest_template","text":"","code":"if (FALSE) { # \\dontrun{ # Create a new test file named # \"test_Logistic_LogisticSelectivity_Evaluate.cpp\" for # `LogisticSelectivity::evaluate()` in # `inst/include/population_dynamics/selectivity/functors/logistic.hpp`.  FIMS:::use_gtest_template(name = \"Logistic_LogisticSelectivity_Evaluate\") } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_testthat_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tests/testthat/test-*.R test file ‚Äî use_testthat_template","title":"Create tests/testthat/test-*.R test file ‚Äî use_testthat_template","text":"helper function creates new test file testthat using template available within templates folder package. test file created \"tests/testthat\" directory name based input argument name. test file already exists, error message returned changes made.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_testthat_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tests/testthat/test-*.R test file ‚Äî use_testthat_template","text":"","code":"use_testthat_template(name)"},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_testthat_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tests/testthat/test-*.R test file ‚Äî use_testthat_template","text":"name character string providing name R function want test. name used create file name, .e., tests/testthat/test-{name}.R. name specified, function able create file name error returned.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_testthat_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tests/testthat/test-*.R test file ‚Äî use_testthat_template","text":"successful, function invisibly returns TRUE allow chaining commands. function unsuccessful, error message returned. Two messages also returned usethis package, used function. first states FIMS project computer. second states file path newly created file. file automatically opened.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_testthat_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create tests/testthat/test-*.R test file ‚Äî use_testthat_template","text":"three minimum testing criteria FIMS, validated every R function within package. template file sets section three following test criteria: Input output correctness (IO correctness): ensure function behaves expected correct inputs returns expected outputs. Edge-case handling (Edge handling): validate function's performance invalid inputs unusual scenarios. Built-errors warnings (Error handling): confirm appropriate error warning messages triggered exceptional conditions. every expectation within test file call #' @description fits one line describing test. information used bookdown report testing results.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/reference/use_testthat_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create tests/testthat/test-*.R test file ‚Äî use_testthat_template","text":"","code":"# Create a new test file named \"test-new_function\" for `new_function()` if (FALSE) { # \\dontrun{ FIMS:::use_testthat_template(\"new_function\") } # }"},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-070","dir":"Changelog","previous_headings":"","what":"FIMS 0.7.0","title":"FIMS 0.7.0","text":"Converts nested list lists used model control tibble one line per parameter can un-nested nested. Increased documentation FIMS using formulas doxygen, building doxygen NOAA-FIMS github.io site instead web page, writing information testing README, etc.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-063","dir":"Changelog","previous_headings":"","what":"FIMS 0.6.3","title":"FIMS 0.6.3","text":"Fixes bugs fims_math.hpp using TMBad library use standard library functions (exp, log, cos, sqrt, pow) necessary.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-062","dir":"Changelog","previous_headings":"","what":"FIMS 0.6.2","title":"FIMS 0.6.2","text":"Fixes bug unfished_biomass initialized. Adds TMBad flag windows Make file.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-061","dir":"Changelog","previous_headings":"","what":"FIMS 0.6.1","title":"FIMS 0.6.1","text":"Fixes FIMS log file user known certain operating systems.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-060","dir":"Changelog","previous_headings":"","what":"FIMS 0.6.0","title":"FIMS 0.6.0","text":"Initializes backend code support model families. Returns ungrouped tibble get_estimates().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-053","dir":"Changelog","previous_headings":"","what":"FIMS 0.5.3","title":"FIMS 0.5.3","text":"Fix json output use full stop rather underscore names, bug introduced v0.5.0. Also fixes reshape_tmb_estimates() splits incorrectly referenced module_id comes label.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-052","dir":"Changelog","previous_headings":"","what":"FIMS 0.5.2","title":"FIMS 0.5.2","text":"Fixes constructor ParameterVector error size small.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-051","dir":"Changelog","previous_headings":"","what":"FIMS 0.5.1","title":"FIMS 0.5.1","text":"Fixes fix-pr-commands.yml permissions use parent workflow.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-050","dir":"Changelog","previous_headings":"","what":"FIMS 0.5.0","title":"FIMS 0.5.0","text":"Implements random effects Adds fits tibble output get_fits() Switch TMBad CppAD Checks length data correct dimension R Adds SB model output Adds README files C++ code Exports logit functions R Adds capabilities GitHub actions document","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-040","dir":"Changelog","previous_headings":"","what":"FIMS 0.4.0","title":"FIMS 0.4.0","text":"Allows CPUE data landings within single fleet changes composition data separate catch. catches, compositions based F, survey compositions scaled q, can also composition data without catch CPUE match population. Fixes bug finalize() variables going scope using shared pointer RealVector, allows estimates tibble return . Output integrated json TMB using reshape_tmb_estimates(), reshape_json_estimates(), reshape_json_derived_quantities(). ParameterVector now set using resize() purrr::walk() rather methods::new(). Restructures R tests using use_testthat_template() Starts use Rcpp::Rcerr instead Rcpp::Rcout Skips parallel distribution rcpp test Adds FIMS_dmultinom() distribution match TMB Fixes bug get_number_of_parameters(). Uses static_cast([-0-9.]+) wrap constant variables. Fixes cmake_minimum_required use range updates googletest version. Adds minimal fims-demo vignette. Removes unused estimated_log_M estimated_log_init_naa inst/include/interface/rcpp/rcpp_objects/rcpp_population.hpp. Adds gdb devcontainer.json file. Fixes broken model comparison project links. Adds dependabot.yml file update GitHub actions. Combine initialize_comp() functions.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-0301","dir":"Changelog","previous_headings":"","what":"FIMS 0.3.0.1","title":"FIMS 0.3.0.1","text":"Pluralism cli incorrect FIMSFrame. Composition modules initialized using composition times uncertainty, failing -999 values -999 * uncertainty equal -999 leading likelihood evaluated.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-0300","dir":"Changelog","previous_headings":"","what":"FIMS 0.3.0.0","title":"FIMS 0.3.0.0","text":"Fits length data using age--length-conversion matrix, data1 includes necessary information needed fit ages lengths. Adds C++ ParameterVector allow estimation time-varying parameters. creating input model specifications create_default_*(), update_parameters(), initialize_*(); adding -999 missing fleet, year, age, length, etc. combinations; running model user-supplied argument n_of_loops, default three, restart optimizer previous run nlminb; summarizing output FIMSFit() function class. Implements switch global verbosity within FIMS use {cli} messages warnings. Updates logging system complete vignette use , logging system can used R C++ errors, warnings, information. Creates initial infrastructure implement random effects density functions. Implements helper function get parameter names C++ code populate results names. Makes lpdf_vec return 0 data missing.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-0200","dir":"Changelog","previous_headings":"","what":"FIMS 0.2.0.0","title":"FIMS 0.2.0.0","text":"Added pkgdown site FIMS Add code cov tests site link Remove recruitment bias correction adjustment plan use TMB (https://github.com/NOAA-FIMS/FIMS/issues/185) Improve logging coverage separate logs multiple files Put recruitment deviations log scale input Report values standard errors Code cleanup, documentation, consistency improvements Remove rapidjson dependence Add start_year end_year slots FIMSFrame Make log_obs_error vector Load Rcpp module upon package install components don‚Äôt need prefaced fims$ Refactor vectors use fims::Vector class Add Newton steps FIMS integration test improve convergence integration test","code":""},{"path":"https://NOAA-FIMS.github.io/FIMS/news/index.html","id":"fims-0100","dir":"Changelog","previous_headings":"","what":"FIMS 0.1.0.0","title":"FIMS 0.1.0.0","text":"Added NEWS.md file track changes package.","code":""}]
