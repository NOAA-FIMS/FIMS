// Instructions ----
// This file follows the format generated by FIMS:::use_gtest_template().
// Necessary tests include input and output (IO) correctness [IO
// correctness], edge-case handling [Edge handling], and built-in errors and
// warnings [Error handling]. See `?FIMS:::use_gtest_template` for more
// information. Every test should have a description comment.
// More assertion macros provided by GoogleTest can be found at 
// https://google.github.io/googletest/reference/assertions.html.

#include "gtest/gtest.h"
// Include the header file for the function being tested
// For example, if testing the `evaluate` member function of the 
// `LogisticSelectivity` class, include the corresponding header in the test 
// file `tests/gtest/test_population_dynamics_selectivity_logistic.cpp`:
// #include "population_dynamics/selectivity/functors/logistic.hpp"
#include "population_dynamics/selectivity/functors/logistic.hpp"
// Include additional headers as needed
// For example, include <iostream> to use `std::cerr` and `std::cout`:
// #include <iostream>

namespace
{
  // LogisticSelectivity_Evaluate 
  // IO correctness
  TEST(LogisticSelectivity_Evaluate, HandlesCorrectInput) {
    // Setup 
    // Load or prepare any necessary data for testing
    fims_popdy::LogisticSelectivity<double> fishery_selectivity;
    fishery_selectivity.inflection_point.resize(1);
    fishery_selectivity.slope.resize(1);
    fishery_selectivity.inflection_point[0] = 20.5;
    fishery_selectivity.slope[0] = 0.2;
    double fishery_x = 40.5;
    // 1.0/(1.0+exp(-(40.5-20.5)*0.2)) = 0.9820138
    double expect_fishery = 0.9820138;
    
    // Test that Evaluate(x) returns y.
    EXPECT_NEAR(fishery_selectivity.evaluate(fishery_x), expect_fishery, 0.0001);
  
  }

  // Edge handling 
  // No edge cases.


  // Error handling
  // No built-in errors/warnings.
}