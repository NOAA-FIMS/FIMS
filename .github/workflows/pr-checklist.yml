# Adds a comment to a newly opened PR letting reviewers know what should be
# included in their review.
name: Add a comment with reviewer checklist when PR opened

on:
  pull_request:
    types: [opened]

jobs:
  pr-checklist:
    runs-on: ubuntu-latest
    name: pr-checklist
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: 'Comment PR'
        uses: actions/github-script@0.3.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var msg = `# Instructions for code reviewer

            Hello reviewer, thanks for taking the time to review this PR!

            - Please use this checklist during your review, checking off items that you have verified are complete, but feel free to skip over items that are not relevant!
            - See the [GitHub documentation for how to comment on a PR](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request) to indicate where you have questions or changes are needed before approving the PR.
            - Please use conventions in the [guidelines for conventional commit messages](https://www.conventionalcommits.org/) for both commit messages and comments.
            - PR reviews are a great way to learn so feel free to share your tips and tricks. However, when suggesting changes to the PR that are optional please include \`nit:\` (for nitpicking) as the comment type. For example, \`nit:\` I prefer using a \`data.frame()\` instead of a \`matrix\` because ...
            - Engage with the developer when they respond to comments and check off additional boxes as they become complete so the PR can be merged in when all the tasks are fulfilled. Make it clear when the PR is approved by selecting the approved status, and potentially by commenting on the PR with something like \`This PR is now ready to be merged, no additional changes are needed\`.

            ## Checklist

            - [ ] The PR is requested to be merged into the appropriate branch (typically dev).
            - [ ] The code is well-designed.
            - [ ] The functionality is good for the users of the code.
            - [ ] Code coverage remains high, indicating the new code is tested.
            - [ ] The code is commented and the comments are clear, useful, and mostly explain why instead of what.
            - [ ] Code is appropriately documented (doxygen and roxygen).
            `
            const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
            github.issues.createComment({ issue_number, owner, repo, body: msg });
